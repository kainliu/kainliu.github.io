<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Westworld</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://westworld.name/"/>
  <updated>2018-08-11T23:58:45.000Z</updated>
  <id>http://westworld.name/</id>
  
  <author>
    <name>Kai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Solve Biggest K Problem By Heap, In Right Way</title>
    <link href="http://westworld.name/posts/solve-biggest-k-problem-by-heap-in-right-way/"/>
    <id>http://westworld.name/posts/solve-biggest-k-problem-by-heap-in-right-way/</id>
    <published>2017-07-17T22:23:00.000Z</published>
    <updated>2018-08-11T23:58:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>In previous blog <a href="/posts/complexity-of-python-operations/">Complexity of Python Operations</a>, I noticed that the way that Richard used to solve the biggest K problem by heap is arguable. </p><h3 id="Richard’s-statement"><a href="#Richard’s-statement" class="headerlink" title="Richard’s statement"></a>Richard’s statement</h3><p>He mentioned that, in order to</p><blockquote><p>use priority to find the 10 biggest (of N) values: we would enqueue N values and then dequeue 10 values.</p></blockquote><p>There are two methods to compare with,</p><ul><li>Implementation 1: Add each new value into an array (complexity = <code>O(1)</code>) for <code>N</code> times, and remove the highest priority value (complexity = <code>O(N)</code>) for <code>10</code> times. $$O(1) * N + O(N) * 10 = O(N)$$</li><li>Implementation 2: Add each new value into a heap (complexity = <code>O(logN)</code>) for <code>N</code> times, and remove the highest priority value (complexity = <code>O(logN)</code>) for <code>10</code> times. $$O(logN) * N + O(logN) * 10 = O(N logN)$$</li></ul><p>Therefore, the conclusion is,</p><blockquote><p>So, as N gets bigger, Implementation 1 will eventually become faster … for the “find the 10 biggest” task.</p></blockquote><h3 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h3><p>The most questionable part is: <strong>Is the cost of building a heap as high as <code>O(NlogN)</code> ?</strong></p><p>As we all know the time complexity of <code>heapsort</code> is also <code>O(NlogN)</code>, however, by heapsorting an array, all the elements are sorted. Then why should we perform an operation, that is close to <code>heapsort</code>, to find top $K$ elements?</p><p>It’s not necessary. The answer is No.</p><p>There are two ways two initialize a heap:</p><ol><li>Heapify the whole tree, everytime when one new value added.</li><li>Heapify the whole tree, after all values are added.</li></ol><p>Obviously the first option will cause no less operations than the second one. Such operation differences can be visualized in <a href="https://visualgo.net/en/heap" target="_blank" rel="noopener">Visualgo.net</a>.<br>Notice there are two options in left bottom menu:</p><ul><li>Create(A) - <code>O(N log N)</code></li><li>Create(A) - <code>O(N)</code></li></ul><p>The results after heapifying <code>[2,7,26,25,19,17,1,90,3,36]</code> are plotted as following trees,</p><p><img src="/images/heap-two-examples.png?width=50" alt="The two options generate different heaps, both of which satisfy the principle of heap. "></p><p>Different forms of heaps, and both legal. These example is another strong evidence for:</p><center> Heap is a partly-sorted structure. </center><p>These options reflect two corresponding ways, and it’s contrary to intuition that the second option has time complexity as low as $O(N)$. </p><center> Why is the cost of building a heap <code>O(N)</code> ? </center><h3 id="Explaination"><a href="#Explaination" class="headerlink" title="Explaination"></a>Explaination</h3><p>I will quote explaination from <a href="https://stackoverflow.com/questions/9755721/how-can-building-a-heap-be-on-time-complexity" target="_blank" rel="noopener">Emre nevayeshirazi</a>,</p><p><img src="/images/heap-build-work.png?width=50" alt="Given a tree with height=3, the bottommost nodes require 0 swapping operation, and the topmost node requires 3 swapping operations in worst cases. "></p><blockquote><p>The main idea is that in the <code>build_heap</code> algorithm the actual heapify cost is not <code>O(log N)</code> for all elements.</p><p>When heapify is called, the running time depends on how far an element might move down in tree before the process terminates. In other words, it depends on the height of the element in the heap. In the worst case, the element might go down all the way to the leaf level.</p><p>Let us count the work done level by level.</p><p>At the bottommost level, there are $2^{h}$ nodes, but we do not call heapify on any of these, so the work is 0. At the 2nd level from the bottom are $2^{h − 1}$ nodes, and each might move down by 1 level. At the 3rd level from the bottom, there are $2^{h − 2}$ nodes, and each might move down by 2 levels.</p><p>As you can see not all heapify operations are <code>O(log N)</code>.</p></blockquote><p>Given a tree with $N$ nodes, the maximum height of a balanced tree, such as a heap tree, $H = Math.ceil(log N)$. In other words, </p><p>$$ N \le 2^{H+1} $$</p><p>Then, we sum up times of swapping operation, from 1 level above bottom, to the top most level. In $h$-th level, there are $2^{H-h}$ nodes to be handled. Thus, total complexity is</p><p>$$\sum_{h=1}^H h * 2^{H-h} = 2^H * \sum_{h=1}^H \frac{h}{2^{h}} \approx \frac{N}{2} * S$$<br>where we define,<br>$$ S = \sum_{h=1}^H \frac{h}{2^{h}} = \frac{1}{2} + \frac{2}{4} + \frac{3}{8} + … \frac{H}{2^H}$$</p><p>And $S$ has a limit, plotted as follows,<br><img src="/images/heap-limit.png" alt="Using R to visualize the limit of $S$."></p><p>$$ \lim_{x\to\infty} S = 2 $$</p><p>We can come to a conclusion that, </p><center>The time complexity of building a heap is <code>O(N)</code>.</center><h3 id="Back-to-finding-K-biggest"><a href="#Back-to-finding-K-biggest" class="headerlink" title="Back to finding K biggest"></a>Back to finding K biggest</h3><p>First, add each element into an array, which will cost <code>O(N)</code>.</p><p>Second, build a <strong>max heap</strong> from nodes in 1-level above bottom. Traverse over these nodes, with index less than half of the total amount, will cost <code>O(N)</code>.</p><p>Third, extract the top node, and re-heapify after each extraction, which will cost <code>O(logN * K)</code>.</p><p>In total, it costs $O(2 N + K logN)$ operations. </p><center>As N/K grows, heap enhanced implementation keeps a stable and low time complexity.</center><h4 id="Keep-a-heap-of-size-K"><a href="#Keep-a-heap-of-size-K" class="headerlink" title="Keep a heap of size K"></a>Keep a heap of size <code>K</code></h4><p>Another idea will be only to keep biggest K elements known so far, as a <strong>min heap</strong>. Every time when the new value is bigger than the smallest one in heap, we replace and re-heapify. This solution only requires one traversal of the array.</p><p>The overall complexity is $O(logK) * O(N) = O(N log K)$. This solution requires much smaller space but in exchange it will take longer time.</p><p>But still, heap enchanced solution outperforms the $O(NK)$ solution.</p><p>Heap rocks! Richard’s conclusion is not true, as an example for <em>sometimes there is not a “best all the time” implementation</em>, his statement is not accurate.</p>]]></content>
    
    <summary type="html">
    
      From brute force to vigilant power.
    
    </summary>
    
    
      <category term="algorithm" scheme="http://westworld.name/tags/algorithm/"/>
    
      <category term="heap" scheme="http://westworld.name/tags/heap/"/>
    
  </entry>
  
  <entry>
    <title>Thoughts on A Beautiful Trick for Memorization</title>
    <link href="http://westworld.name/posts/thoughts-on-a-beautiful-trick-of-memorization-in-python/"/>
    <id>http://westworld.name/posts/thoughts-on-a-beautiful-trick-of-memorization-in-python/</id>
    <published>2017-07-06T21:23:00.000Z</published>
    <updated>2018-08-11T23:58:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>This trick is using a function argument to memorize recursive states of expensive calculations ( <a href="https://docs.python.org/2/faq/programming.html#why-are-default-values-shared-between-objects" target="_blank" rel="noopener">python docs</a> ).</p><p>An example is to improve fibonacci calculator as follows,</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib_naive</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="string">""" Naive fibonacci calculator """</span></span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">1</span>: <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> fib_naive(n<span class="number">-1</span>) + fib_naive(n<span class="number">-2</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib_cache</span><span class="params">(n, _cache = &#123;&#125;)</span>:</span></span><br><span class="line">    <span class="string">""" Fibonacci calculator with cache """</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Return cache results</span></span><br><span class="line">    <span class="keyword">if</span> n <span class="keyword">in</span> _cache:</span><br><span class="line">        <span class="keyword">return</span> _cache[n]      </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">1</span>:</span><br><span class="line">        result = <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result = fib_cache(n<span class="number">-1</span>) + fib_cache(n<span class="number">-2</span>)</span><br><span class="line">        <span class="comment"># Callers will never provide a second parameter.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Store results</span></span><br><span class="line">    _cache[n] = result        </span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>If you totally get the trick of <code>_cache = {}</code> — isn’t it nice? — I am very happy to accept it.</p><p>Of course, maintaining a global variable for storage could also deliver the same functionality.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">""" Using global cache """</span></span><br><span class="line"></span><br><span class="line">cache = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n <span class="keyword">in</span> cache:      <span class="comment"># Is it a undefined local variable?</span></span><br><span class="line">        ....</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> n == MAXIMUM_VALUE:</span><br><span class="line">        cache = &#123;&#125;      <span class="comment"># May I clear the cache safely?</span></span><br><span class="line"></span><br><span class="line">    ....</span><br><span class="line">    _cache[n] = result  <span class="comment"># Should be okay to update the cache.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">walk</span><span class="params">(n)</span>:</span>            <span class="comment"># What if I do not want to share cache </span></span><br><span class="line">                        <span class="comment"># with other functions?</span></span><br><span class="line">    ....</span><br></pre></td></tr></table></figure><p>I can not answer these questions with 100 percent confidence.</p><p>Let’s start with understanding <code>local</code> and <code>global</code> variables.</p><h2 id="Local-amp-Global"><a href="#Local-amp-Global" class="headerlink" title="Local &amp; Global"></a>Local &amp; Global</h2><p>Python is compact. And with a price.</p><p>For example, it saves us from declaring the variables in a verbose way,</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = Point(<span class="number">10</span>,<span class="number">10</span>) <span class="comment"># Python</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Point x = <span class="keyword">new</span> Point(<span class="number">10</span>, <span class="number">10</span>);  <span class="comment">/* Java */</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="keyword">new</span> Point(<span class="number">10</span>, <span class="number">10</span>);  <span class="comment">// ECMA5 Javascript</span></span><br></pre></td></tr></table></figure><p>But it takes some efforts to understand its concept of variable scopes.</p><div class="vertical-col"><br><div class="col"><br><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = [<span class="keyword">True</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">  arr[<span class="number">0</span>] = <span class="keyword">False</span></span><br><span class="line">  <span class="keyword">print</span> <span class="string">'inside: '</span>, arr</span><br><span class="line"></span><br><span class="line">run()</span><br><span class="line"><span class="keyword">print</span> <span class="string">'outside:'</span>, arr</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line">inside:  [<span class="keyword">False</span>]</span><br><span class="line">outside: [<span class="keyword">False</span>]</span><br></pre></td></tr></table></figure><br><br></div><div class="col"><br><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = [<span class="keyword">True</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">  arr = [<span class="keyword">False</span>]</span><br><span class="line">  <span class="keyword">print</span> <span class="string">'inside: '</span>, arr</span><br><span class="line"></span><br><span class="line">run()</span><br><span class="line"><span class="keyword">print</span> <span class="string">'outside:'</span>, arr</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line">inside:  [<span class="keyword">False</span>]</span><br><span class="line">outside: [<span class="keyword">True</span>]</span><br></pre></td></tr></table></figure><br><br></div><p></p></div><p></p><p>Let’s examine the differences.</p><p>In the first block, I am actually calling <code>arr.__setitem__(0, False)</code>. Python finds out that <code>arr</code> is not defined inside function scope (<code>local</code>), and thus continues to look it up in the outside scope (<code>global</code>). After successfully locating <code>arr</code> in global scope, python calls a function to change the first item of a global variable.</p><p>In comparison, in the second block, python considers <code>arr = [False]</code> as an action to create a local variable.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># &lt; global variable scope &gt;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># &lt; local variable scope &gt;</span></span><br></pre></td></tr></table></figure><p>If we would like to add another element to <code>arr</code>, there are two ways:</p><div class="vertical-col"><br><div class="col"><br><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = [<span class="keyword">True</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">  arr.extend([<span class="keyword">False</span>])</span><br><span class="line">  <span class="keyword">print</span> <span class="string">'inside: '</span>, arr</span><br><span class="line"></span><br><span class="line">run()</span><br><span class="line"><span class="keyword">print</span> <span class="string">'outside:'</span>, arr</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line">inside:  [<span class="keyword">True</span>, <span class="keyword">False</span>]</span><br><span class="line">outside: [<span class="keyword">True</span>, <span class="keyword">False</span>]</span><br></pre></td></tr></table></figure><br><br></div><div class="col"><br><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = [<span class="keyword">True</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">  arr += [<span class="keyword">False</span>]</span><br><span class="line">  <span class="keyword">print</span> <span class="string">'inside: '</span>, arr</span><br><span class="line"></span><br><span class="line">run()</span><br><span class="line"><span class="keyword">print</span> <span class="string">'outside:'</span>, arr</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line">UnboundLocalError: </span><br><span class="line">local variable <span class="string">'arr'</span> referenced before assignment</span><br></pre></td></tr></table></figure><br><br></div><br></div><p>The first block is easy to understand, since calling a function <code>arr.extend</code> is just like <code>arr.__setitem__</code> in the previous example.<br>Meanwhile, in second block, <code>arr += [False]</code> equals to <code>arr = arr + [False]</code>. </p><p>One principle here in python is,</p><blockquote><p>Anything being assigned ( <code>x = ...</code> ) is taken as a local variable in <code>function</code>.</p></blockquote><p>At the left side of equation, on such principle, python judges <code>arr</code> is a local variable. At the right side of equation, it throws an error because of a loop of variable assignment.</p><p>Our original purpose is to take <code>arr</code> as a global variable. And we have to add a line to declare such intention.</p><div class="vertical-col"><br><div class="col"><br><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = [<span class="keyword">True</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="comment"># declare global using `global`</span></span><br><span class="line">  <span class="keyword">global</span> arr   </span><br><span class="line">  arr += [<span class="keyword">False</span>]</span><br><span class="line">  <span class="keyword">print</span> <span class="string">'inside: '</span>, arr</span><br><span class="line"></span><br><span class="line">run()</span><br><span class="line"><span class="keyword">print</span> <span class="string">'outside:'</span>, arr</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line">inside:  [<span class="keyword">True</span>, <span class="keyword">False</span>]</span><br><span class="line">outside: [<span class="keyword">True</span>, <span class="keyword">False</span>]</span><br></pre></td></tr></table></figure><br><br></div><div class="col"><br><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = [<span class="keyword">True</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="comment"># declare local using `=`</span></span><br><span class="line">  arr = []     </span><br><span class="line">  arr += [<span class="keyword">False</span>]</span><br><span class="line">  <span class="keyword">print</span> <span class="string">'inside: '</span>, arr</span><br><span class="line"></span><br><span class="line">run()</span><br><span class="line"><span class="keyword">print</span> <span class="string">'outside:'</span>, arr</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line">inside:  [<span class="keyword">False</span>]</span><br><span class="line">outside: [<span class="keyword">True</span>]</span><br></pre></td></tr></table></figure><br><br></div><br></div><h3 id="Looking-around-on-Javascript"><a href="#Looking-around-on-Javascript" class="headerlink" title="Looking around on Javascript"></a>Looking around on Javascript</h3><div class="vertical-col"><br><div class="col"><br><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// IT'S Javascript!</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// OPS! forget to initialize before use it</span></span><br><span class="line">    a = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'inside: '</span>, a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">run()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'outside:'</span>, a)</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line">inside:  <span class="literal">false</span></span><br><span class="line">outside: <span class="literal">false</span></span><br></pre></td></tr></table></figure><br><br></div><div class="col"><br><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// IT'S Javascript!</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a;</span><br><span class="line">    a = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'inside: '</span>, a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">run()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'outside:'</span>, a)</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line">inside:  <span class="literal">false</span></span><br><span class="line">outside: <span class="literal">true</span></span><br></pre></td></tr></table></figure><br><br></div><br></div><p>In comparison, it’s easy to understand why javascript shocks so many engineers with non-front-end background, by placing more weight on <code>easy to run</code> over <code>global variable safety</code>. While in Baidu (one of the largest search companies, <a href="https://en.wikipedia.org/wiki/Baidu" target="_blank" rel="noopener">wiki</a>), I have gained more than enough experience in debugging on web pages, where global variables are contaminated by careless coders.</p><h2 id="Memorization"><a href="#Memorization" class="headerlink" title="Memorization"></a>Memorization</h2><p>Does the cache speed up the calculation?</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> timeit <span class="keyword">import</span> default_timer <span class="keyword">as</span> timer</span><br><span class="line"></span><br><span class="line">k = <span class="number">30</span></span><br><span class="line">start = timer()</span><br><span class="line">fib_naive(k)</span><br><span class="line">pause = timer()</span><br><span class="line">fib_cache(k)</span><br><span class="line">stop = timer()</span><br><span class="line"></span><br><span class="line">time1 = pause - start</span><br><span class="line">time2 = stop - pause</span><br><span class="line"><span class="keyword">print</span> <span class="string">'%6f / %6f = %d'</span> % (time1, time2, time1 / time2)</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"><span class="number">0.311446</span> / <span class="number">0.000061</span> = <span class="number">5102</span></span><br></pre></td></tr></table></figure><p>The <code>Big O</code> of <code>fib</code> is $O(2^n)$ (<a href="https://stackoverflow.com/questions/360748/computational-complexity-of-fibonacci-sequence" target="_blank" rel="noopener">stackoverflow</a>), while the <code>fib_cache</code> is $O(n)$.</p><p>Memorization contributes a lot, and actually it is the core of <em>Dynamic Programming</em>. Some would like to introduce DP as,</p><center> Top-down Dynamic Programming = Divide &amp; Conquer + Memorization </center><p>And I think this equation explains <em>Dynamic Programming</em> better than the name itself.</p><h2 id="Default-Value"><a href="#Default-Value" class="headerlink" title="Default Value"></a>Default Value</h2><p>Consider following example:</p><div class="vertical-col"><br><div class="col"><br><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">store</span><span class="params">(ele, arr = [])</span>:</span></span><br><span class="line"></span><br><span class="line">  arr.append(ele)</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> store(<span class="number">1</span>) == [<span class="number">1</span>]</span><br><span class="line"><span class="keyword">print</span> store(<span class="number">2</span>) == [<span class="number">2</span>]</span><br><span class="line"><span class="keyword">print</span> store.__defaults__</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line">([<span class="number">1</span>, <span class="number">2</span>],)</span><br></pre></td></tr></table></figure><br><br></div><div class="col"><br><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">store</span><span class="params">(ele, arr = None)</span>:</span></span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> arr: arr = []</span><br><span class="line">  arr.append(ele)</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> store(<span class="number">1</span>) == [<span class="number">1</span>]</span><br><span class="line"><span class="keyword">print</span> store(<span class="number">2</span>) == [<span class="number">2</span>]</span><br><span class="line"><span class="keyword">print</span> store.__defaults__ </span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line">(<span class="keyword">None</span>,)</span><br></pre></td></tr></table></figure><br><br></div><br></div><p>As the <a href="https://docs.python.org/2/faq/programming.html#why-are-default-values-shared-between-objects" target="_blank" rel="noopener">Python docs</a> points out that,</p><blockquote><p>It is often expected that a function call creates new objects for default values. This is not what happens. Default values are created exactly <strong>once</strong>, when the function is defined.</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// IT'S Javascript</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">store</span>(<span class="params">ele, arr = []</span>)</span>&#123;</span><br><span class="line">    arr.push(ele)</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A new call creates a new array with default value.</span></span><br><span class="line"><span class="built_in">console</span>.log(store(<span class="number">1</span>))  <span class="comment">// output: [ 1 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(store(<span class="number">2</span>))  <span class="comment">// output: [ 2 ]</span></span><br></pre></td></tr></table></figure><p>So a good programming practice is to NOT use mutable objects, e.g.<code>list</code>/<code>dict</code>,  as default values. Immutable objects of default values are also created once, since it can not be changed, the values will be copied to create new local variables inside the function.</p><p>Unless you are very clear about what you are doing, mutable objects of default values can cause confusing consequences.</p><p>Looking at <code>fib_cache(..., _cache = {})</code> again, it takes full advantage of such feature, <code>_cache</code> is <em>bound</em> to this function, serving as a function-level shared variable. It reminds me of <em>class variable</em> shared by all instances.</p><hr><p>I will end this post by improving the global solution as mentioned in the beginning.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">""" Global variable solution """</span></span><br><span class="line"></span><br><span class="line">cache = &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n <span class="keyword">in</span> cache:      <span class="comment"># Wait.. is it an undefined local variable?</span></span><br><span class="line">        ....            <span class="comment">#</span></span><br><span class="line">                        <span class="comment"># No. It is the global variable as we wished.</span></span><br><span class="line">    <span class="keyword">if</span> n == MAXIMUM_VALUE:</span><br><span class="line">        <span class="comment"># cache = &#123;&#125;    # May I clear the cache safely?</span></span><br><span class="line">                        <span class="comment">#</span></span><br><span class="line">                        <span class="comment"># Not in this way.</span></span><br><span class="line">                        <span class="comment"># This declaration will raise `UnboundLocalError`.</span></span><br><span class="line">        cache.clear()   <span class="comment"># Use `clear` method instead.</span></span><br><span class="line"></span><br><span class="line">    ....</span><br><span class="line"></span><br><span class="line">    cache[n] = result   <span class="comment"># It's okay to update the cache in this way</span></span><br><span class="line">                        <span class="comment"># since it's `cache.__setitem__(n, result)`.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">walk</span><span class="params">()</span>:</span></span><br><span class="line">    ....                <span class="comment"># Every other function could touch the global cache.</span></span><br><span class="line">                        <span class="comment"># So why not use `_cache` trick :)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Using function-level shared variables as memorizers.
    
    </summary>
    
    
      <category term="python" scheme="http://westworld.name/tags/python/"/>
    
      <category term="fibonacci" scheme="http://westworld.name/tags/fibonacci/"/>
    
      <category term="memorization" scheme="http://westworld.name/tags/memorization/"/>
    
      <category term="scope" scheme="http://westworld.name/tags/scope/"/>
    
  </entry>
  
  <entry>
    <title>A Fingerprint For An Article</title>
    <link href="http://westworld.name/posts/a-fingerprint-from-an-article/"/>
    <id>http://westworld.name/posts/a-fingerprint-from-an-article/</id>
    <published>2017-07-04T23:00:10.000Z</published>
    <updated>2018-08-11T23:58:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>We are not so into duplicated information. Information theories and the economic principles place more weight on <em>uniqueness</em> and <em>scarcity</em>, over <em>duplication</em> and <em>universality</em>.</p><p>It’s the same when we have a huge number of articles to read.One question is raised: can we generate a small piece to reflect the article, by quickly quantifying the uniqueness of an article?</p><p>A intuitive way is to break text into words, and find out valuable keywords.</p><p>I would like to use a few lines of Javascript to give a quick estimation of such uniqueness.</p><ul><li><p>Get the text of document.</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fingerprinter</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.content = <span class="built_in">document</span>.body.textContent.replace(<span class="regexp">/(\s+|\W+)/g</span>, <span class="string">' '</span>)</span><br><span class="line">    <span class="comment">// get text, and remove redundant spaces and punctuations.</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Next, count words.</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fingerprinter</span></span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">// initial a counter for words in the article</span></span><br><span class="line">  wordCounter() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// cut article into words</span></span><br><span class="line">    <span class="keyword">var</span> words = <span class="keyword">this</span>.content.split(<span class="string">' '</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// counter</span></span><br><span class="line">    <span class="keyword">this</span>.dictionary = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    words.forEach(<span class="function">(<span class="params">word</span>) =&gt;</span> &#123;</span><br><span class="line">      word = word.toLowerCase()</span><br><span class="line">      <span class="comment">// when we have a new word that never seen before</span></span><br><span class="line">      <span class="keyword">if</span> (!(word <span class="keyword">in</span> <span class="keyword">this</span>.dictionary)) &#123;</span><br><span class="line">        <span class="comment">// init with 0</span></span><br><span class="line">        <span class="keyword">this</span>.dictionary[word] = <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// and add by 1</span></span><br><span class="line">      <span class="keyword">this</span>.dictionary[word] += <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Select the most frequent words as keywords, excluding non-informative words.</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fingerprinter</span></span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">// return top N words with repeating times</span></span><br><span class="line">  <span class="comment">// @param: Int</span></span><br><span class="line">  <span class="comment">// @return: [ &#123;"word": String, "count": Int&#125; ]</span></span><br><span class="line">  top(N=<span class="number">5</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> all = []</span><br><span class="line"></span><br><span class="line">    <span class="comment">// a small dictionary contains non-informative words</span></span><br><span class="line">    <span class="keyword">var</span> remove_dictionary = &#123;</span><br><span class="line">      <span class="string">'a'</span>:  <span class="number">0</span>, <span class="string">'an'</span>:<span class="number">0</span>, <span class="string">'the'</span>:<span class="number">0</span>,</span><br><span class="line">      <span class="string">'to'</span>: <span class="number">0</span>, <span class="string">'of'</span>:<span class="number">0</span>, <span class="string">'and'</span>:<span class="number">0</span>,</span><br><span class="line">      <span class="string">'it'</span>: <span class="number">0</span>, <span class="string">'is'</span>:<span class="number">0</span>, <span class="string">'so'</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> word <span class="keyword">in</span> <span class="keyword">this</span>.dictionary) &#123;</span><br><span class="line">      <span class="comment">// skip this iteration if it's in the removing dictionary</span></span><br><span class="line">      <span class="comment">// or it's very short</span></span><br><span class="line">      <span class="keyword">if</span> (word <span class="keyword">in</span> remove_dictionary or word.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">      &#125;</span><br><span class="line">      all.push([<span class="keyword">this</span>.dictionary[word], word])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// descending sort (with strange javascript sort function)</span></span><br><span class="line">    all.sort(<span class="function">(<span class="params">a,b</span>) =&gt;</span> &#123;<span class="keyword">return</span> b[<span class="number">0</span>] - a[<span class="number">0</span>]&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get top N</span></span><br><span class="line">    <span class="keyword">return</span> all.slice(<span class="number">0</span>, N)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><p>Analysis result of the previous paragraph of this blog, is as follows:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="keyword">var</span> fp = <span class="keyword">new</span> Fingerprinter()</span><br><span class="line">&gt;&gt;&gt; fp.wordCounter()</span><br><span class="line">&gt;&gt;&gt; fp.top()</span><br><span class="line"></span><br><span class="line">[ [ <span class="number">3</span>, <span class="string">'we'</span> ],</span><br><span class="line">  [ <span class="number">3</span>, <span class="string">'uniqueness'</span> ],</span><br><span class="line">  [ <span class="number">2</span>, <span class="string">'into'</span> ],</span><br><span class="line">  [ <span class="number">2</span>, <span class="string">'information'</span> ],</span><br><span class="line">  [ <span class="number">2</span>, <span class="string">'article'</span> ] ]</span><br></pre></td></tr></table></figure><p>These keywords can be helpful. It’s a rough guess that <code>we</code> are talking about <code>uniqueness</code> and <code>information</code> about <code>article</code>s.</p><p>In a recently published web page, often it is not cached or crawled by server. This snippet can be helpful in sending a rough fingerprint of the article from the browser, which is almost instant.</p>]]></content>
    
    <summary type="html">
    
      An instant text mining of pages in the browser.
    
    </summary>
    
    
      <category term="javascript" scheme="http://westworld.name/tags/javascript/"/>
    
      <category term="text mining" scheme="http://westworld.name/tags/text-mining/"/>
    
      <category term="fingerprint" scheme="http://westworld.name/tags/fingerprint/"/>
    
      <category term="algorithm" scheme="http://westworld.name/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Blog New Logo</title>
    <link href="http://westworld.name/posts/blog-new-logo/"/>
    <id>http://westworld.name/posts/blog-new-logo/</id>
    <published>2017-06-26T12:00:10.000Z</published>
    <updated>2018-08-11T23:58:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>I always enjoy the icon designs in just black and white. Leaving the shapes to deliver the idea.</p><p>I do think a nice logo design, a compact icon, can deliver the essence spirit of a product, a brand, or a company.</p><blockquote><p>A picture is worth a thousand words.</p></blockquote><p><code>World</code>. In Chinese it is written as <code>世界</code>(<a href="https://zh.wikipedia.org/wiki/%E4%B8%96%E7%95%8C" target="_blank" rel="noopener">wiki</a>), which origins from <code>Sanskrit</code>(<code>梵语</code>, <a href="https://en.wikipedia.org/wiki/Sanskrit" target="_blank" rel="noopener">wiki</a>). The position of Sanskrit in India, is as Latin and Ancient Greek in Europe.</p><p>The two characters serve the word as two hemispheres. <code>世</code> means <strong>all the times (in the past and future)</strong>, and <code>界</code> means <strong>all the spaces</strong>.</p><p><img src="/images/blog-logo.png" alt="Illustrated by Kai, 2017."></p><p>I polished the shape of the first horizontal stroke of the character <code>世</code> to create two sharp triangles in the character. The character is placed in an unstable way, it will eventually roll over to left, and the triangles will keep it more stable by sticking into the ground.</p><p>When designing the logo, I find there lies a culture difference. Thinking about <code>世界</code>(<code>world</code>) and <code>宇宙</code>(<code>universe</code>), in both eastern words, the first character stands for <code>all the times</code> and the latter for <code>all the spaces</code>.</p><p><img src="/images/times-and-spaces.png" alt="Times + Spaces = World. &lt;br/&gt; Illustrated by Kai, 2017."></p><p>In contrast, the word <code>world</code> in English refers to <em>the earth and all the people, places, and things on it</em> (<a href="http://dictionary.cambridge.org/dictionary/english/world" target="_blank" rel="noopener">Cambridge Dictionary</a>), and <code>universe</code> stands for <em>everything that exists, especially all physical matter, including all the stars, planets, galaxies, etc. in space</em> (<a href="http://dictionary.cambridge.org/dictionary/english/universe" target="_blank" rel="noopener">Cambridge Dict.</a>). The concept of time is somehow missing.</p><p>Maybe eastern philosophers suffer more anxiety from taking time as an additional cage.</p>]]></content>
    
    <summary type="html">
    
      A logo is worth a thousand words.
    
    </summary>
    
    
      <category term="design" scheme="http://westworld.name/tags/design/"/>
    
      <category term="icon" scheme="http://westworld.name/tags/icon/"/>
    
      <category term="sketch" scheme="http://westworld.name/tags/sketch/"/>
    
  </entry>
  
  <entry>
    <title>Complexity of Python Operations</title>
    <link href="http://westworld.name/posts/complexity-of-python-operations/"/>
    <id>http://westworld.name/posts/complexity-of-python-operations/</id>
    <published>2017-05-21T12:00:10.000Z</published>
    <updated>2018-08-11T23:58:45.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/big-o-1.png?width=60" alt="Big-O Complexity Chart. From &lt;i&gt;bigocheatsheet.com&lt;/i&gt;"></p><p>This article <a href="https://www.ics.uci.edu/~pattis/ICS-33/lectures/complexitypython.txt" target="_blank" rel="noopener"><code>Complexity of Python Operations</code></a> has a clear and inspiring explanation of computation complexity.<br>I really like the way it analyses problems, especially the section for <a href="#Priority-Queue">Priority Queue</a>. I reformat the whole article to Markdown as follows.</p><hr><h3 id="Complexity-of-Python-Operations"><a href="#Complexity-of-Python-Operations" class="headerlink" title="Complexity of Python Operations"></a>Complexity of Python Operations</h3><p>Author: <a href="http://www.ics.uci.edu/~pattis/" target="_blank" rel="noopener">Richard E. Pattis</a><br><a href="https://www.ics.uci.edu/~pattis/ICS-33/lectures/complexitypython.txt" target="_blank" rel="noopener">https://www.ics.uci.edu/~pattis/ICS-33/lectures/complexitypython.txt</a></p><hr><p>In this lecture we will learn the complexity classes of various operations on Python data types. Then we will learn how to combine these complexity classes to compute the complexity class of all the code in a function, and therefore the complexity class of the function. This is called “static” analysis, because we do not need to run any code to perform it (contrasted with Dynamic or Empirical Analysis, when we do run code and take measurements).</p><h2 id="Python-Complexity-Classes"><a href="#Python-Complexity-Classes" class="headerlink" title="Python Complexity Classes"></a>Python Complexity Classes</h2><p>In <a href="http://www.ics.uci.edu/~thornton/ics46/Notes/" target="_blank" rel="noopener">ICS-46</a> we will write low-level implementations of all of Python’s data types and see/understand WHY these complexity classes apply. For now we just need to try to absorb (not memorize) this information, with some -but minimal- justification.</p><p>Binding a value to any name (copying a reference) is <code>O(1)</code>. Simple operators on integers (whose values are small: e.g., under 12 digits) like <code>+</code> or <code>==</code> are also <code>O(1)</code>.</p><p>In all these examples, <code>N = len(data-type)</code>. The operations are organized by increasing complexity.</p><h3 id="Lists"><a href="#Lists" class="headerlink" title="Lists:"></a>Lists:</h3><table><thead><tr><th>Operation</th><th>Example</th><th>Complexity Class</th><th>Notes</th></tr></thead><tbody><tr><td>Index</td><td>l[i]</td><td>O(1)</td><td></td></tr><tr><td>Store</td><td>l[i] = 0</td><td>O(1)</td><td></td></tr><tr><td>Length</td><td>len(l)</td><td>O(1)</td><td></td></tr><tr><td>Append</td><td>l.append(5)</td><td>O(1)</td><td></td></tr><tr><td>Pop</td><td>l.pop()</td><td>O(1)</td><td>same as l.pop(-1), popping at end</td></tr><tr><td>Clear</td><td>l.clear()</td><td>O(1)</td><td>similar to l = []</td></tr><tr><td>Slice</td><td>l[a:b]</td><td>O(b-a)</td><td>l[1:5] : O(1) <br> l[:] : O(len(l)-0)=O(N)</td></tr><tr><td>Extend</td><td>l.extend(…)</td><td>O(len(…))</td><td>depends only on len of extension</td></tr><tr><td>Construction</td><td>list(…)</td><td>O(len(…))</td><td>depends on length of …</td></tr><tr><td>check ==, !=</td><td>l1 == l2</td><td>O(N)</td><td></td></tr><tr><td>Insert</td><td>l[a:b] = …</td><td>O(N)</td><td></td></tr><tr><td>Delete</td><td>del l[i]</td><td>O(N)</td><td></td></tr><tr><td>Remove</td><td>l.remove(…)</td><td>O(N)</td><td></td></tr><tr><td>Containment</td><td>x in/not in l</td><td>O(N)</td><td>searches list</td></tr><tr><td>Copy</td><td>l.copy()</td><td>O(N)</td><td>Same as l[:] which is O(N)</td></tr><tr><td>Pop</td><td>l.pop(i)</td><td>O(N)</td><td>O(N-i) <br> l.pop(0):O(N) (see above <code>l.pop(-1):O(1)</code> )</td></tr><tr><td>Extreme value</td><td>min(l)/max(l)</td><td>O(N)</td><td>searches list</td></tr><tr><td>Reverse</td><td>l.reverse()</td><td>O(N)</td><td></td></tr><tr><td>Iteration</td><td>for v in l:</td><td>O(N)</td><td></td></tr><tr><td>Sort</td><td>l.sort()</td><td>O(N Log N)</td><td>key/reverse mostly doesn’t change</td></tr><tr><td>Multiply</td><td>k*l</td><td>O(k N)</td><td>5*l : O(N) <br> <span style="color:gray;"><font style="text-decoration: line-through;">len(l)*l : O(N^2)</font> (Kai’s comment: correct but confusing)</span></td></tr></tbody></table><p>Tuples support all operations that do not mutate the data structure (and with the same complexity classes).</p><h3 id="Sets"><a href="#Sets" class="headerlink" title="Sets:"></a>Sets:</h3><table><thead><tr><th>Operation</th><th>Example</th><th>Complexity Class</th><th>Notes</th></tr></thead><tbody><tr><td>Length</td><td>len(s)</td><td>O(1)</td><td></td></tr><tr><td>Add</td><td>s.add(5)</td><td>O(1)</td><td></td></tr><tr><td>Containment</td><td>x in/not in s</td><td>O(1)</td><td>compare to list/tuple - O(N)</td></tr><tr><td>Remove</td><td>s.remove(5)</td><td>O(1)</td><td>compare to list/tuple - O(N)</td></tr><tr><td>Discard</td><td>s.discard(5)</td><td>O(1)</td><td></td></tr><tr><td>Pop</td><td>s.pop(i)</td><td>O(1)</td><td>compare to list - O(N)</td></tr><tr><td>Clear</td><td>s.clear()</td><td>O(1)</td><td>similar to s = set()</td></tr><tr><td>Construction</td><td>set(…)</td><td>O(len(…))</td><td>depends on length of …</td></tr><tr><td><code>==</code> , <code>!=</code></td><td>s != t</td><td>O(len(s))</td><td>same as len(t): False in O(1) if the lengths are different</td></tr><tr><td><code>&lt;=</code> , <code>&lt;</code></td><td>s &lt;= t</td><td>O(len(s))</td><td>issubset (s &lt;= t) == (t &gt;= s)</td></tr><tr><td><code>&gt;=</code> , <code>&gt;</code></td><td>s &gt;= t</td><td>O(len(t))</td><td>issuperset</td></tr><tr><td>Union</td><td>s</td><td>t</td><td>O(len(s)+len(t))</td><td></td></tr><tr><td>Intersection</td><td>s &amp; t</td><td>O(len(s)+len(t))</td><td></td></tr><tr><td>Difference</td><td>s - t</td><td>O(len(s)+len(t))</td><td></td></tr><tr><td>Symmetric Diff</td><td>s ^ t</td><td>O(len(s)+len(t))</td><td></td></tr><tr><td>Iteration</td><td>for v in s:</td><td>O(N)</td><td></td></tr><tr><td>Copy</td><td>s.copy()</td><td>O(N)</td></tr></tbody></table><p>Sets have many more operations that are <code>O(1)</code> compared with lists and tuples. Not needing to keep values in a specific order (which lists/tuples require) allows for faster operations.</p><p>Frozen sets support all operations that do not mutate the data structure (and with the same complexity classes).</p><h3 id="Dictionaries-dict-and-defaultdict"><a href="#Dictionaries-dict-and-defaultdict" class="headerlink" title="Dictionaries: dict and defaultdict"></a>Dictionaries: dict and defaultdict</h3><table><thead><tr><th>Operation</th><th>Example</th><th>Complexity Class</th><th>Notes</th></tr></thead><tbody><tr><td>Index</td><td>d[k]</td><td>O(1)</td><td></td></tr><tr><td>Store</td><td>d[k] = v</td><td>O(1)</td><td></td></tr><tr><td>Length</td><td>len(d)</td><td>O(1)</td><td></td></tr><tr><td>Delete</td><td>del d[k]</td><td>O(1)</td><td></td></tr><tr><td>get/setdefault</td><td>d.method</td><td>O(1)</td><td></td></tr><tr><td>Pop</td><td>d.pop(k)</td><td>O(1)</td><td></td></tr><tr><td>Pop item</td><td>d.popitem()</td><td>O(1)</td><td></td></tr><tr><td>Clear</td><td>d.clear()</td><td>O(1)</td><td>similar to s = {} or = dict()</td></tr><tr><td>View</td><td>d.keys()</td><td>O(1)</td><td>same for d.values()</td></tr><tr><td>Construction</td><td>dict(…)</td><td>O(len(…))</td><td>depends # (key,value) 2-tuples</td></tr><tr><td>Iteration</td><td>for k in d:</td><td>O(N)</td><td>all forms: keys, values, items</td></tr></tbody></table><p>So, most dict operations are <code>O(1)</code>.</p><p>defaultdicts support all operations that dicts support, with the same complexity classes (because it inherits all the operations); this assumes that calling the constructor when a values isn’t found in the defaultdict is <code>O(1)</code> - which is true for int(), list(), set(), … (the things we commonly use)</p><p>Note that <code>for i in range(...)</code> is <code>O(len(...))</code>; so <code>for i in range(1,10)</code> is <code>O(1)</code>.<br>If len(alist) is N, then<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(alist)):</span><br></pre></td></tr></table></figure></p><p>is O(N) because it loops N times. Of course even<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range (len(alist)//<span class="number">2</span>):</span><br></pre></td></tr></table></figure></p><p>is <code>O(N)</code> because it loops N/2 times, and dropping the constant 1/2 makes it <code>O(N)</code>: the work doubles when the list length doubles.</p><p>Finally, when comparing two lists for equality, the complexity class above shows as <code>O(N)</code>, but in reality we would need to multiply this complexity by <code>O(==)</code> where <code>O(==)</code> is the complexity class for checking whether two values in<br>the list are <code>==</code>. If they are ints, <code>O(==)</code> would be O(1); if they are strings, <code>O(==)</code> in the worst case it would be <code>O(len(string))</code>. This issue applies any time an <code>==</code> check is done. We mostly will assume <code>==</code> checking on values in lists is <code>O(1)</code>.</p><hr><h2 id="Composing-Complexity-Classes-Sequential-and-Nested-Statements"><a href="#Composing-Complexity-Classes-Sequential-and-Nested-Statements" class="headerlink" title="Composing Complexity Classes: Sequential and Nested Statements"></a>Composing Complexity Classes: Sequential and Nested Statements</h2><p>In this section we will learn how to combine complexity class information about simple operations into complexity information about complex operations (composed from simple operations). The goal is to be able to analyze all the statements in a function/method to determine the complexity class of executing the function/method.</p><hr><h3 id="Law-of-Addition-for-big-O-notation"><a href="#Law-of-Addition-for-big-O-notation" class="headerlink" title="Law of Addition for big-O notation"></a>Law of <code>Addition</code> for big-O notation</h3><p><code>O(f(n)) + O(g(n))</code> is <code>O( f(n) + g(n) )</code></p><p>That is, we when adding complexity classes we bring the two complexity classes inside the O(…). Ultimately, O( f(n) + g(n) ) results in the bigger of the two complexity class (because we drop the lower added term). So,</p><p><code>O(N) + O(Log N)  =  O(N + Log N)  =  O(N)</code></p><p>because N is the faster growing function.</p><p>This rule helps us understand how to compute the complexity of doing some SEQUENCE of operations: executing a statement that is <code>O(f(n))</code> followed by executing a statement that is <code>O(g(n))</code>. Executing both statements SEQUENTIALLY is <code>O(f(n)) + O(g(n))</code> which is <code>O( f(n) + g(n) )</code> by the rule above.</p><p>For example, if some function call f(…) is O(N) and another function call g(…) is O(N Log N), then doing the sequence</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f(...)</span><br><span class="line">g(...)</span><br></pre></td></tr></table></figure><p>is O(N) + O(N Log N) = O(N + N Log N) = O(N Log N). Of course, executing the sequence (calling f twice)</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f(...)</span><br><span class="line">f(...)</span><br></pre></td></tr></table></figure><p>is O(N) + O(N) which is O(N + N) which is O(2N) which is O(N).</p><p>Note that for an if statement like:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> test:        assume complexity of test    <span class="keyword">is</span> O(T)</span><br><span class="line">   block <span class="number">1</span>      assume complexity of block <span class="number">1</span> <span class="keyword">is</span> O(B1)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   block <span class="number">2</span>      assume complexity of block <span class="number">2</span> <span class="keyword">is</span> O(B2)</span><br></pre></td></tr></table></figure><p>The complexity class for the if is O(T) + max(O(B1),O(B2)). The test is always evaluated, and one of the blocks is always executed. In the worst case, the if will execute the block with the largest complexity. So, given</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> test:        complexity <span class="keyword">is</span> O(N)</span><br><span class="line">   block <span class="number">1</span>      complexity <span class="keyword">is</span> O(N^<span class="number">2</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   block <span class="number">2</span>      complexity <span class="keyword">is</span> O(N)</span><br></pre></td></tr></table></figure><p>The complexity class for the if is O(N) + max (O($N^2$),O(N))) = O(N) + O($N^2$) = O($N^2$). If the test had complexity class O($N^3$), then the complexity class for the if is O($N^3$) + max (O($N^2$),O(N))) = O($N^3$).</p><hr><h3 id="Law-of-Multiplication-for-big-O-notation"><a href="#Law-of-Multiplication-for-big-O-notation" class="headerlink" title="Law of Multiplication for big-O notation"></a>Law of <code>Multiplication</code> for big-O notation</h3><p><code>O(f(n)) * O(g(n))</code> is <code>O( f(n) * g(n) )</code></p><p>If we repeat an O(f(N)) process O(N) times, the resulting complexity is O(N) * O(f(N)) = O( Nf(N) ). An example of this is, if some function call f(…) is O($N^2$), then executing that call N times (in the following loop)<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">    f(...)</span><br></pre></td></tr></table></figure></p><p>is O(N) * O($N^2$) = O($N*N^2$) = O($N^3$)</p><p>This rule helps us understand how to compute the complexity of doing some statement INSIDE A BLOCK controlled by a statement that is REPEATING it. We multiply the complexity class of the number of repetitions by the complexity class of the statement(s) being repeated.</p><p>Compound statements can be analyzed by composing the complexity classes of their constituent statements. For sequential statements the complexity classes are added; for statements repeated in a loop the complexity classes are multiplied.</p><hr><h3 id="An-example"><a href="#An-example" class="headerlink" title="An example"></a>An example</h3><p>Let’s use the data and tools discussed above to analyze (determine their complexity classes) three different functions that each compute the same result:</p><blockquote><p>Whether or not a list contains only unique values (no duplicates).</p></blockquote><p>We will assume in all three examples that <code>len(alist)</code> is N.</p><h4 id="Algorithm-1"><a href="#Algorithm-1" class="headerlink" title="Algorithm 1"></a>Algorithm 1</h4><blockquote><p>A list is unique if each value in the list does not occur in any later indexes: alist[i+1:] is a list containing all values after the one at index i.</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_unique1</span> <span class="params">(alist)</span>:</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> range(len(alist)):  <span class="comment"># O(N)</span></span><br><span class="line">    <span class="keyword">if</span> alist[i] <span class="keyword">in</span> alist[i+<span class="number">1</span>:]:<span class="comment"># O(N) - index+add+slice+in: O(1)+O(1)+O(N)+O(N)</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">False</span>             <span class="comment"># O(1) - never executed in worst case</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">True</span>                  <span class="comment"># O(1)</span></span><br></pre></td></tr></table></figure><p>The complexity class for executing the entire function is O(N) * O(N) + O(1) = O(N^2). So we know from the previous lecture that if we double the length of alist, this function takes 4 times as long to execute.</p><p>Note that in the worst case, we never return False and keep executing the loop, so this O(1) does not appear in the answer. Also, in the worst case the list slice is aliset[1:] which is O(N-1) = O(N).</p><h4 id="Algorithm-2"><a href="#Algorithm-2" class="headerlink" title="Algorithm 2"></a>Algorithm 2</h4><blockquote><p>A list is unique if when we sort its values, no ADJACENT values are equal. If there were duplicate values, sorting the list would put these duplicate values right next to each other (adjacent). Here we copy the list so as to not mutate (change the order of the parameter’s list) by sorting it: it turns out that copying the list does not increase the complexity class of the method.</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_unique2</span> <span class="params">(alist)</span>:</span></span><br><span class="line">  copy = list(alist)            <span class="comment"># O(N)</span></span><br><span class="line">  copy.sort()                   <span class="comment"># O(N Log N) - for fast Python sorting</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> range(len(alist)<span class="number">-1</span>): <span class="comment"># O(N) - really N-1, but that is O(N)</span></span><br><span class="line">    <span class="keyword">if</span> copy[i] == copy[i+<span class="number">1</span>]:    <span class="comment"># O(1): +, 2 [i], and  == ints: all O(1)</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">False</span>              <span class="comment"># O(1) - never executed in worst case</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">True</span>                   <span class="comment"># O(1)</span></span><br></pre></td></tr></table></figure><p>The complexity class for executing the entire function is given by the sum O(N) + O(N Log N) + O(N)*O(1) + O(1) = O(N + N Log N + O(N*1) + 1) = O(N + N Log N + N + 1) = O(N Log N + 2N + 1) = O(N Log N). So the complexity class for this algorithm/function is lower than the first algorithm, the <code>is_unique1</code> function. For large N <code>is_unique2</code> will eventually be faster.</p><p>Notice that the complexity class for sorting is dominant in this code: it does most of the work. If we double the length of alist, this function takes a bit more than twice the amount of time. In N Log N: N doubles and Log N gets a tiny bit bigger (i.e., Log 2N = 1 + Log N; e.g., Log 2000 = 1 + Log 1000 = 11, so compared to 1000 Log 1000, 2000 Log 2000 got 2.2 times bigger, or 10% bigger than just doubling).</p><p>Looked at another way if<br>$T(N) = c*(N Log N)$</p><p>then,<br>$T(2N) = c*(2N Log 2N)$ = $c*2N*(Log N + 1)$ = $c*2N Log N + c*2N$ = $2*T(N) + c*2N$</p><p>Or, computing the doubling signature</p><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line"><span class="built_in">T</span>(<span class="number">2</span><span class="built_in">N</span>)    c*<span class="number">2</span>(<span class="built_in">N</span> <span class="built_in">Log</span> <span class="built_in">N</span>) + c*<span class="number">2</span><span class="built_in">N</span>            <span class="number">2</span></span><br><span class="line">----- =  -------------------  =  <span class="number">2</span> + -------</span><br><span class="line"><span class="built_in">T</span>(<span class="built_in">N</span>)          c*(<span class="built_in">N</span> <span class="built_in">Log</span> <span class="built_in">N</span>)             <span class="built_in">Log</span> <span class="built_in">N</span></span><br></pre></td></tr></table></figure><p>So, the ratio is 2 + a bit (and that bit gets smaller as N increases)</p><h4 id="Algorithm-3"><a href="#Algorithm-3" class="headerlink" title="Algorithm 3"></a>Algorithm 3</h4><blockquote><p>A list is unique if when we turn it into a set, its length is unchanged: if duplicate values were added to the set, its length would be smaller than the length of the list by exactly the number of duplicates in the list added to the set.</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_unique3</span> <span class="params">(alist)</span>:</span></span><br><span class="line">    aset = set(alist)              <span class="comment"># O(N): construct set from alist values</span></span><br><span class="line">    <span class="keyword">return</span> len(aset) == len(alist) <span class="comment"># O(1): 2 len (each O(1)) and == ints O(1)</span></span><br></pre></td></tr></table></figure><p>The complexity class for executing the entire function is O(N) + O(1) = O(N + 1) = O(N). So the complexity class for this algortihm/function is lower than both the first and second algorithms/functions. If we double the length of alist, this function takes just twice the amount of time. We could write the body of this function more simply as:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> len(set(alist)) == len(alist)</span><br></pre></td></tr></table></figure></p><p>where evaluating set(alist) takes O(N) and then computing the two len’s and comparing them for equality are all O(1).</p><p>So the bottom line here is that there might be many algorithms/functions to solve some problem. If they are small, we can analyze them statically (looking at the code, not running it) to determine their complexity classes. For large problem sizes, the algorithm/function with the smallest complexity class will be best. For small problem sizes, complexity classes don’t determine which is best (we need to account for the constants and lower order terms when sizes are small), but we could run the functions (dynamic analysis, aka empirical analysis) to test which is fastest on small size.</p><hr><h3 id="Priority-Queue"><a href="#Priority-Queue" class="headerlink" title="Priority Queue"></a>Priority Queue</h3><p>Using a Class (implementable 3 ways) Example:</p><p>We will now look at the solution of a few problems (combining operations on a <code>priority queue</code>: <code>pq</code>) and how the complexity class of the result is affected by three different classes/implementations of priority queues.</p><p>In a priority queue, we can add values and remove values to the data structure. A correctly working priority queue always removes the maximum value remaining in the priority queue. Think of a line/queue outside of a Hollywood nightclub, such that whenever space opens up inside, the most famous person in line gets to go in (the “highest priority” person), no matter how long less famous people have been standing in line (contrast this with <code>first come/first serve</code>, which is a regular -non priority- queue).</p><p>For the problems below, all we need to know is the complexity class of the “add” and “remove” operations.</p><table><thead><tr><th></th><th>add</th><th>remove</th></tr></thead><tbody><tr><td>Implementation 1</td><td><code>O(1)</code></td><td><code>O(N)</code></td></tr><tr><td>Implementation 2</td><td><code>O(N)</code></td><td><code>O(1)</code></td></tr><tr><td>Implementation 3</td><td><code>O(Log N)</code></td><td><code>O(Log N)</code></td></tr></tbody></table><p><strong>Implementation 1</strong> adds the new value into the pq by appending the value at the rear of a list or the front of a linked list: both are O(1); it removes the highest priority value by scanning through the list or linked list to find the highest value, which is O(N), and then removing that value, also O(N) in the worst case  (removing at the front of a list; at the rear of a linked list).</p><p><strong>Implementation 2</strong> adds the new value into the pq by scanning the list or linked list for the right spot to put it and putting it there, which is O(N). Lists store their highest priority at the rear (linked lists at the front); it removes the highest priority value from the rear for lists (or the front for linked lists), which is O(1).</p><p><strong>Implementation 3</strong>, which is discussed in <a href="http://www.ics.uci.edu/~thornton/ics46/Notes/PriorityQueues/" target="_blank" rel="noopener">ICS-46</a>, uses a binary heap tree (not a binary search tree) to implement both operations with “middle” complexity O(Log N): this complexity class greater than O(1) but less than O(N).</p><h4 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem 1"></a>Problem 1</h4><blockquote><p>Suppose we wanted to use the priority queue to sort N values: we add N values in the pq and then remove all N values (first the highest, next the second highest, …). Here is the complexity of these combined operations for each implementation.</p></blockquote><ul><li>Implementation 1:<br>$O(N)*O(1) + O(N)*O(N)$         = $O(N)   + O(N^2)$    = $O(N^2)$</li><li>Implementation 2:<br>$O(N)*O(N) + O(N)*O(1)$         = $O(N^2) + O(N)$      = $O(N^2)$</li><li>Implementation 3:<br>$O(N)*O(Log N) + O(N)*O(Log N)$ = $O(N LogN) + O(N LogN)$ = $O(N LogN)$</li></ul><p>Here, Implementation 3 has the lowest complexity class for the combined operations. Implementations 1 and 2 each do one operation quickly but the other slowly: both are done O(N) times. The slowest operation determines the complexity class, and both are equally slow. The complexity class O(Log N) is between O(1) and O(N); surprisingly, it is actually “closer” to O(1) than O(N), even though it does grow -because it grows so slowly; yes, O(1) doesn’t grow at all, but O(Log N) grows very slowly: the known Universe has about $ 10^{90} $ particles of matter, and $ Log_2(10^{90}) = Log_2 (10 ^ 3) ^ {30} \approx 30 * 10 = 300 $, which isn’t very big compared to $10^{90}$.</p><h4 id="Problem-2"><a href="#Problem-2" class="headerlink" title="Problem 2"></a>Problem 2</h4><blockquote><p>Suppose we wanted to use the priority queue to find the 10 biggest (of N) values: we would enqueue N values and then dequeue 10 values. Here is the complexity of these combined operations for each implementation..</p></blockquote><ul><li>Implementation 1:<br>$O(N)*O(1) + O(10)*O(N)$        = $O(N)   + O(N)$      = $O(N)$</li><li>Implementation 2:<br>$O(N)*O(N) + O(10)*O(1)$         = $O(N^2) + O(1)$     = $O(N^2)$</li><li>Implementation 3:<br>$O(N)*O(Log N) + O(10)*O(Log N)$ = $O(N LogN) + O(LogN)$ = $O(N LogN)$</li></ul><p>Here, Implementation 1 has the lowest complexity for the combined operations. That makes sense, as the operation done O(N) times (add) is very simple (add to the end of a list/the front of a linked list is O(1)) and the operation done a constant number of times (10, independent of N) is the expensive operation (remove, which is O(N)). It even beats the complexity of Implementation 3. So, as N gets bigger, implementation 1 will eventually become faster than the other two for the “find the 10 biggest” task.</p><blockquote><p><strong>Kai’s comment</strong>:</p><p>For problem 2, the author came to a conclusion that, the brutal loop through the $N$ values for $K$ times, performs better than a heap based solution. It violates my intuition.<br>The questionable part is the cost of building a heap: $O(N LogN)$. The cost of <code>heapsort</code> is the same, and by heapsorting an array, all the elements are sorted. Then why should we perform an operation, that is close to heapsort, to find top $K$ elements?<br>I will discuss this in another blog <a href="/posts/solve-biggest-k-problem-by-heap-in-right-way/">Solve Biggest K Problem By Heap, In Right Way</a></p></blockquote><p>So, the bottom line here is that sometimes there is NOT a “best all the time” implementation for a data structure. We need to know what problem we are solving (the complexity classes of all the operations in various implementations and the number of times we must do these operations) to choose the most efficient implementation for solving the problem.</p>]]></content>
    
    <summary type="html">
    
      A clear and inspiring explanation by Richard Pattis.
    
    </summary>
    
    
      <category term="python" scheme="http://westworld.name/tags/python/"/>
    
      <category term="complexity" scheme="http://westworld.name/tags/complexity/"/>
    
  </entry>
  
  <entry>
    <title>On Priority Queue</title>
    <link href="http://westworld.name/posts/on-priority-queue/"/>
    <id>http://westworld.name/posts/on-priority-queue/</id>
    <published>2017-05-09T12:00:10.000Z</published>
    <updated>2018-08-11T23:58:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Priority-Queue-And-Heap"><a href="#Priority-Queue-And-Heap" class="headerlink" title="Priority Queue And Heap"></a>Priority Queue And Heap</h2><p>StackOverflow / <a href="http://stackoverflow.com/questions/18993269/difference-between-priority-queue-and-a-heap" target="_blank" rel="noopener">http://stackoverflow.com/questions/18993269/difference-between-priority-queue-and-a-heap</a></p><blockquote><p>A priority queue is an <code>abstract datatype</code>. It is a shorthand way of describing a particular interface and behavior, and says nothing about the underlying implementation.</p><p>A heap is a <code>data structure</code>. It is a name for a particular way of storing data that makes certain operations very efficient.</p><p>It just so happens that a heap is a very good data structure to implement a priority queue, because the operations which are made efficient by the heap data structure are the operations that the priority queue interface needs.</p></blockquote><h2 id="Python-Example"><a href="#Python-Example" class="headerlink" title="Python Example"></a>Python Example</h2><p><code>Leetcode 23</code>: Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Queue <span class="keyword">import</span> PriorityQueue</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeKLists</span><span class="params">(self, lists)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type lists: List[ListNode]</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        dummy = ListNode(<span class="keyword">None</span>)</span><br><span class="line">        current = dummy</span><br><span class="line">        q = PriorityQueue()</span><br><span class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> lists:</span><br><span class="line">            <span class="keyword">if</span> node:</span><br><span class="line">                q.put( (node.val, node) )</span><br><span class="line">        <span class="keyword">while</span> q.qsize() &gt; <span class="number">0</span>:</span><br><span class="line">            current.next = q.get()[<span class="number">1</span>]</span><br><span class="line">            current = current.next</span><br><span class="line">            <span class="comment"># if exists, put next element into the queue</span></span><br><span class="line">            <span class="keyword">if</span> current.next:</span><br><span class="line">                q.put( (current.next.val, current.next) )</span><br><span class="line">        <span class="keyword">return</span> dummy.next</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Priority-Queue-And-Heap&quot;&gt;&lt;a href=&quot;#Priority-Queue-And-Heap&quot; class=&quot;headerlink&quot; title=&quot;Priority Queue And Heap&quot;&gt;&lt;/a&gt;Priority Queue An
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://westworld.name/tags/leetcode/"/>
    
      <category term="python" scheme="http://westworld.name/tags/python/"/>
    
      <category term="data structure" scheme="http://westworld.name/tags/data-structure/"/>
    
  </entry>
  
  <entry>
    <title>On Promise</title>
    <link href="http://westworld.name/posts/on-promise/"/>
    <id>http://westworld.name/posts/on-promise/</id>
    <published>2017-05-09T12:00:10.000Z</published>
    <updated>2018-08-11T23:58:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>With three examples I summarize the usage of <code>promise</code>:</p><table><thead><tr><th>Function</th><th>Features</th><th>Flow Chart</th></tr></thead><tbody><tr><td>Baseline</td><td><li> send a request then display the response, until all the requests are done. </li><li> <code>array.reduce</code> is promise-compatible while <code>array.forEach</code> is not promise-compatible.</li></td><td><img src="/images/promise-0.png" alt=""></td></tr><tr><td>In Parallel</td><td><li> send all requests in parallel, and display responses when all of them arrive. </li><li>  use <code>Promise.all</code> and <code>array.map</code>.</li></td><td><img src="/images/promise-1.png" alt=""></td></tr><tr><td>In Parallel 2</td><td><li> extension of <code>workInParallel</code> </li><li> send all requests in parallel, while responses are shown AS SOON AS they arrived.</li></td><td><img src="/images/promise-2.png" alt=""></td></tr><tr><td>In Parallel And Sequence</td><td><li> showing contents according to their priorities. important content is mandatory for displaying the trivial blocks.  </li><li> improve user experience (<a href="https://developers.google.com/web/fundamentals/getting-started/primers/promises#parallelism_and_sequencing_getting_the_best_of_both" target="_blank" rel="noopener">Google Developers</a>).</li></td><td><img src="/images/promise-3.png" alt=""></td></tr></tbody></table><h3 id="Baseline"><a href="#Baseline" class="headerlink" title="Baseline"></a>Baseline</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">work</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> final = []</span><br><span class="line">  <span class="comment">// arr.reduce(`callback`, `[initialValue]`)</span></span><br><span class="line">  <span class="comment">// - `callback`</span></span><br><span class="line">  <span class="comment">//    - `promise` : the sequence of promise</span></span><br><span class="line">  <span class="comment">//    - `item`    : the item in the array</span></span><br><span class="line">  <span class="comment">// - `[initialValue]`: the initial state of promise sequence</span></span><br><span class="line">  <span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">promise, item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> promise.then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`A RESULT: <span class="subst">$&#123;result&#125;</span>`</span>)</span><br><span class="line">      <span class="keyword">return</span> asyncRequest(item).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`B RESULT: <span class="subst">$&#123;result&#125;</span>`</span>)</span><br><span class="line">        final.push(result)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;, <span class="built_in">Promise</span>.resolve(<span class="number">0</span>))</span><br><span class="line">  <span class="comment">// when the last request arrives, show all the results together</span></span><br><span class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`FINAL R.: <span class="subst">$&#123;final&#125;</span>`</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Mock-Async-Request"><a href="#Mock-Async-Request" class="headerlink" title="Mock Async Request"></a>Mock Async Request</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Using a promise to mock an async request</span></span><br><span class="line"><span class="comment">// `e` type : int</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncRequest</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(</span><br><span class="line">      () =&gt; resolve(e),</span><br><span class="line">      <span class="comment">// the time delay is `e` second(s).</span></span><br><span class="line">      <span class="number">1000</span> * e</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&gt; work([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">A RESULT: <span class="number">0</span>     <span class="comment">// the initial promise value</span></span><br><span class="line"><span class="built_in">Promise</span> &#123; &lt;pending&gt; &#125;</span><br><span class="line">                <span class="comment">// 1s later</span></span><br><span class="line">B RESULT: <span class="number">1</span>     </span><br><span class="line">A RESULT: <span class="number">1</span></span><br><span class="line">                <span class="comment">// 2s later</span></span><br><span class="line">B RESULT: <span class="number">2</span>    </span><br><span class="line">A RESULT: <span class="number">2</span></span><br><span class="line">                <span class="comment">// 3s later</span></span><br><span class="line">B RESULT: <span class="number">3</span>   </span><br><span class="line">FINAL R.: <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="In-Parallel"><a href="#In-Parallel" class="headerlink" title="In Parallel"></a>In Parallel</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">workInParallel</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.all(arr.map(asyncRequest))</span><br><span class="line">    .then(<span class="function"><span class="params">final</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`FINAL R.: <span class="subst">$&#123;final&#125;</span>`</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>All requests are sent in parallel. The function <code>array.map</code> takes an function <code>asyncRequest</code> and maps all elements to an array of <em>promises</em>.<br>Then, <code>Promise.all</code> takes an array of promises, and create a promise that fulfills when all of them successfully complete.</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&gt; workInParallel([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span> &#123; &lt;pending&gt; &#125;</span><br><span class="line">                <span class="comment">// 3s later</span></span><br><span class="line">FINAL R.: <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&gt; workInParallel([<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>])</span><br><span class="line"><span class="built_in">Promise</span> &#123; &lt;pending&gt; &#125;</span><br><span class="line">                <span class="comment">// 3s later</span></span><br><span class="line">FINAL R.: <span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span></span><br></pre></td></tr></table></figure><p>Passing <code>[1,2,3]</code> and <code>[1,3,2]</code> to the parallel function, both of them cost 3 seconds to fulfill, and the order remains in the final result.<br><code>Promise.all</code> ensures results in the same order as the promises we passed in.</p><h3 id="In-Parallel-2"><a href="#In-Parallel-2" class="headerlink" title="In Parallel 2"></a>In Parallel 2</h3><p>By extending <code>Promise.all</code> method as follows, each response can be displayed as soon as it arrives.</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">workInParallel2</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.all(arr.map(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// init the requests</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`A RESULT: <span class="subst">$&#123;result&#125;</span>`</span>)</span><br><span class="line">    <span class="keyword">return</span> asyncRequest(result).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// display the result as soon as it arrives</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`B RESULT: <span class="subst">$&#123;result&#125;</span>`</span>)</span><br><span class="line">      <span class="keyword">return</span> result</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;))</span><br><span class="line">  <span class="comment">// when all responses arrive show final results</span></span><br><span class="line">  .then(<span class="function"><span class="params">final</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`FINAL R.: <span class="subst">$&#123;final&#125;</span>`</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&gt; workInParallel2([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">A RESULT: <span class="number">1</span></span><br><span class="line">A RESULT: <span class="number">2</span></span><br><span class="line">A RESULT: <span class="number">3</span></span><br><span class="line"><span class="built_in">Promise</span> &#123; &lt;pending&gt; &#125;</span><br><span class="line">              <span class="comment">// 1s later</span></span><br><span class="line">B RESULT: <span class="number">1</span></span><br><span class="line">              <span class="comment">// 1s later</span></span><br><span class="line">B RESULT: <span class="number">2</span></span><br><span class="line">              <span class="comment">// 1s later</span></span><br><span class="line">B RESULT: <span class="number">3</span></span><br><span class="line">FINAL R.: <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="In-Parallel-And-Sequence"><a href="#In-Parallel-And-Sequence" class="headerlink" title="In Parallel And Sequence"></a>In Parallel And Sequence</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">workInParallelAndSequence</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> final = []    </span><br><span class="line">  <span class="keyword">return</span> arr.map(asyncRequest)</span><br><span class="line">    .reduce(<span class="function">(<span class="params">sequence, item</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// init a promise sequence</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`SEQ.:`</span>, sequence)</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`---`</span>)</span><br><span class="line">      <span class="keyword">return</span> sequence.then( <span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`A RESULT: <span class="subst">$&#123;result&#125;</span>`</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`ITEM:`</span>, item)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`---`</span>)</span><br><span class="line">        <span class="comment">// queue each promise request to the sequence</span></span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line">      &#125;)</span><br><span class="line">      .then( <span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`B RESULT: <span class="subst">$&#123;result&#125;</span>`</span>)</span><br><span class="line">        <span class="comment">// get the response</span></span><br><span class="line">        final.push(result)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;, <span class="built_in">Promise</span>.resolve(<span class="number">0</span>))</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`FINAL R.: <span class="subst">$&#123;final&#125;</span>`</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&gt; workInParallelAndSequence([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">SEQ.: <span class="built_in">Promise</span> &#123; <span class="number">0</span> &#125;         <span class="comment">// Adding 1 req, 0 req resolved</span></span><br><span class="line">---</span><br><span class="line">SEQ.: <span class="built_in">Promise</span> &#123; &lt;pending&gt; &#125; <span class="comment">// Adding 2 req, 1 req pending</span></span><br><span class="line">---</span><br><span class="line">SEQ.: <span class="built_in">Promise</span> &#123; &lt;pending&gt; &#125; <span class="comment">// Adding 3 req, 2 req pending</span></span><br><span class="line">---</span><br><span class="line">A RESULT: <span class="number">0</span></span><br><span class="line">ITEM: <span class="built_in">Promise</span> &#123; &lt;pending&gt; &#125; <span class="comment">// fulfilling 1 req</span></span><br><span class="line">---                         <span class="comment">// 1s later</span></span><br><span class="line">B RESULT: <span class="number">1</span></span><br><span class="line">A RESULT: <span class="number">1</span></span><br><span class="line">ITEM: <span class="built_in">Promise</span> &#123; &lt;pending&gt; &#125; <span class="comment">// fulfilling 2 req</span></span><br><span class="line">---                         <span class="comment">// 1s later</span></span><br><span class="line">B RESULT: <span class="number">2</span></span><br><span class="line">A RESULT: <span class="number">2</span></span><br><span class="line">ITEM: <span class="built_in">Promise</span> &#123; &lt;pending&gt; &#125; <span class="comment">// fulfilling 3 req</span></span><br><span class="line">---                         <span class="comment">// 1s later</span></span><br><span class="line">B RESULT: <span class="number">3</span></span><br><span class="line">FINAL R.: <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br></pre></td></tr></table></figure><p>Let’s assume in a single page, there are 3 units loading contents by <code>promise</code> requests.</p><ul><li><code>Header</code> contains relatively less information and returns very quickly.</li><li><code>Main</code> contains articles. It costs the longest time among all units.</li><li><code>Sidebar</code> contains advertisement. We do not want to impress the audience with advertisements, while the article is still loading. The sidebar usually returns more quickly than <code>Main</code>.</li></ul><p>In short, our intention is to make sure that <code>Sidebar</code> displays after <code>Main</code>.</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// The request</span></span><br><span class="line">[</span><br><span class="line">  <span class="number">1</span>, <span class="comment">// `#Header`  takes 1 second</span></span><br><span class="line">  <span class="number">3</span>, <span class="comment">// `#Main`    takes 3 seconds</span></span><br><span class="line">  <span class="number">2</span>  <span class="comment">// `#Sidebar` takes 2 seconds</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>We would like to take full advantage of <code>promise</code> parallelism and keep the sequencing.</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&gt; workInParallelAndSequence([<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">SEQ.: <span class="built_in">Promise</span> &#123; <span class="number">0</span> &#125;         <span class="comment">// Adding 1 req, 0 resolved</span></span><br><span class="line">---</span><br><span class="line">SEQ.: <span class="built_in">Promise</span> &#123; &lt;pending&gt; &#125; <span class="comment">// Adding 3 req, 1 req pending</span></span><br><span class="line">---</span><br><span class="line">SEQ.: <span class="built_in">Promise</span> &#123; &lt;pending&gt; &#125; <span class="comment">// Adding 2 req, 3 req pending</span></span><br><span class="line">---</span><br><span class="line">A RESULT: <span class="number">0</span>                </span><br><span class="line">ITEM: <span class="built_in">Promise</span> &#123; &lt;pending&gt; &#125; <span class="comment">// fulfilling 1 req</span></span><br><span class="line">---                         <span class="comment">// 1s later</span></span><br><span class="line">B RESULT: <span class="number">1</span></span><br><span class="line">A RESULT: <span class="number">1</span></span><br><span class="line">ITEM: <span class="built_in">Promise</span> &#123; &lt;pending&gt; &#125; <span class="comment">// fulfilling 3 req</span></span><br><span class="line">---                         <span class="comment">// 2s later</span></span><br><span class="line">B RESULT: <span class="number">3</span></span><br><span class="line">A RESULT: <span class="number">3</span></span><br><span class="line">ITEM: <span class="built_in">Promise</span> &#123; <span class="number">2</span> &#125;         <span class="comment">// 2 req already fulfilled</span></span><br><span class="line">---</span><br><span class="line">B RESULT: <span class="number">2</span></span><br><span class="line">FINAL R.: <span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span></span><br></pre></td></tr></table></figure><p>As seen in the console output, the response of <code>2</code> was being held while response of <code>3</code> on the fly.</p><p>Short version is as follows.</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">workInParallelAndSequence</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr.map(asyncRequest)</span><br><span class="line">    .reduce(<span class="function">(<span class="params">sequence, item</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> sequence.then( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line">      &#125;)</span><br><span class="line">      .then( <span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(result)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;, <span class="built_in">Promise</span>.resolve())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Such method can be applied in many scenarios, when the main content (feed flow, article, etc.) is slower than less important contents (comments, advertisements, etc.).</p><h2 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h2><p>I find that debugging asynchronous functions is quite hard even enhanced with <em>Promise</em>. Instead of <code>console.log</code>, I believe there will be a better tool to detail requesting/responding stacks.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;With three examples I summarize the usage of &lt;code&gt;promise&lt;/code&gt;:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Function&lt;/th&gt;
&lt;th&gt;Features&lt;/th&gt;
&lt;th&gt;Flow 
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://westworld.name/tags/javascript/"/>
    
      <category term="async" scheme="http://westworld.name/tags/async/"/>
    
  </entry>
  
  <entry>
    <title>Find Similar Images Based On Locality Sensitive Hashing</title>
    <link href="http://westworld.name/posts/find-similar-images-based-on-locality-sensitive-hashing/"/>
    <id>http://westworld.name/posts/find-similar-images-based-on-locality-sensitive-hashing/</id>
    <published>2016-03-31T22:00:00.000Z</published>
    <updated>2018-08-11T23:58:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>Let’s start with the distribution of colors in a picture.</p><p>The color distribution reflects how the pixels are colored. In the space of <code>RGB</code>(red, green, blue), each pixel is represented by 24 bits (8 bits for red, 8 for green and 8 for blue). For example, given 8 bits to describe how red it is, there are 256 ($2^8$) different variations. In total, there are 16,777,216 ($256^3$) different kinds of <code>RGB</code> combinations, which already reaches <a href="https://en.wikipedia.org/wiki/Color_depth#True_color_.2824-bit.29" target="_blank" rel="noopener">the limit of human eyes</a>.</p><p><img src="https://github.com/kainliu/Prism/raw/master/screenshot/bird.png?width=50" alt="A parrot on a tree. The right side is the RGB(red, green, blue) distribution."></p><p>To find similar images, the basic idea is that <strong>similar images share similar color distributions</strong>. To quantify similarities, it’s straightforward to make use of pixel counts to build up the profiles, which we call <code>signatures</code>.</p><h2 id="Signatures"><a href="#Signatures" class="headerlink" title="Signatures"></a>Signatures</h2><p>Let’s start with a simple example, assume that we partition each color into two categories:</p><ul><li><code>not-so-red</code> vs <code>red</code></li><li><code>not-so-green</code> vs <code>green</code></li><li><code>not-so-blue</code> vs <code>blue</code></li></ul><p><img src="/images/color-histogram-1.png" alt="2 segmentation of `RGB` colors"></p><p>All the pixels are partitioned into 8 ($2^3$) categories, and the pixel counts should be a list with 8 integers:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pixelCounts = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br></pre></td></tr></table></figure></p><p>For example, if the first pixel has a RGB value of (<code>150, 20, 30</code>), it be considered as (<code>red</code>, <code>not-so-green</code>, <code>not-so-blue</code>), and thus we increase the bucket <code>1,0,0</code> by 1.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pixelCounts[<span class="number">4</span>] += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>After walking through all the pixels in the image,</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pixelCounts = [<span class="number">0</span>, <span class="number">6197</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">7336</span>, <span class="number">15</span>, <span class="number">4961</span>, <span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>The list <code>pixelCounts</code> contains the information about color distributions, and we call it a <code>signature</code>.</p><p><img src="/images/color-histogram-2.png" alt="4 segmentation of `RGB` colors"></p><p>When we hash all colors into several buckets, it is intuitional to see similar colors in the same bucket. For example, <code>150, 20, 30</code> and <code>155, 22, 35</code> are very similar, so both of them are put into the same bucket.</p><p><img src="/images/color-histogram-3.png" alt="The pixel in RGB (`150, 20, 30`) is put into the bucket (`2,0,0`)"></p><p>If we increase the number of buckets, the signatures will be longer. For example, a 4-segmented signature contains 64 ($4^3$) integers.</p><p><img src="/images/bird-color-table.png?width=0.5" alt="The table shows the 4-segmented result of &lt;i&gt;A parrot on a tree&lt;/i&gt;. &lt;br/&gt; The vector of pixel counts (&lt;i&gt;#Pixels&lt;/i&gt;) is the signature."></p><h2 id="Similarities"><a href="#Similarities" class="headerlink" title="Similarities"></a>Similarities</h2><p>Now we extract a signature for every picture, the next job is to find how to measure the similarities between the signatures.</p><p><img src="/images/cosine-similarity.jpg" alt="Euclidean Distance `dist(A,B)` and Cosine Similarity `cos\theta`."></p><p><code>Cosine Similarity</code> is an inner product space that measures the cosine of the angle between them. The figure above illustrates that <code>Cosine Similarity</code> measures the angle between the vector space, compared to <code>Euclidean Distance</code> (a measure of the absolute distance between two points), more is to reflect differences in direction, but not the location.</p><p>If consider the signatures as 64-dimensional vectors, we could use <code>Cosine Similarity</code> to quantify their similarities.</p><h2 id="Locality-Sensitive-Hashing"><a href="#Locality-Sensitive-Hashing" class="headerlink" title="Locality Sensitive Hashing"></a>Locality Sensitive Hashing</h2><p><code>Locality Sensitive Hashing</code> (LSH) is an algorithm for searching near neighbors in high dimensional spaces. The core idea is to hash similar items into the same bucket. We will walk through the process of applying <strong>LSH for Cosine Similarity</strong>, with the help of the following plots from <a href="http://www.cs.jhu.edu/~vandurme/papers/VanDurmeLallACL10-slides.pdf" target="_blank" rel="noopener">Benjamin Van Durme &amp; Ashwin Lall, ACL2010</a>, with a few modifications by me.</p><p><img src="/images/cos-lsh-1.png?width=50" alt="Figure 1. Cosine Similarity LSH."></p><ol><li>In the Figure 1, there are two data points in red and yellow, representing two-dimensional data points. We are trying to find their cosine similarity using LSH.</li><li>The gray lines are randomly picked planes. Depending on whether the data point locates above or below a gray line, we mark this result as $1$ (above the line, in white) or $0$ (below the line, in black).</li><li>On the upper-left corner, there are two rows of white/black squares, representing the results of the two data points respectively.</li></ol><p><img src="/images/cos-lsh-2.png?width=50" alt="Figure 2. Cosine Similarity LSH."></p><ol><li>As in the example, we use 6 planes, and thus use 6 bits to represent each data. The length of sketch $b = 6$.</li><li>The hamming distance between the two hashed value $h = 1$.</li><li>The estimated cosine similarity is $cos(\frac{h}{b}\pi)$.</li></ol><p>These randomly picked planes are used as the buckets to hash the data points. We are able to estimate the cosine similarities from the hamming distances, the calculation of latter relatively more efficient.</p><p>Cosine Similarity is not sensitive to the magnitude of vectors. In some scenarios, people will apply <code>Adjusted Cosine Similarity</code> to reduce such sensitivity. Since the only concern here is to find whether the data points are located at the same side of the plane, there is no need to adjust the vectors, before calculating their similarities.</p><p>We can consider the pool of $k$ random planes playing the role of the hash function. Random planes are easy to generate, and highly efficient to apply in matrix.</p><h2 id="Sketches"><a href="#Sketches" class="headerlink" title="Sketches"></a>Sketches</h2><p>As we apply $k$ random planes to the whole dataset, each data point generates a $k$-bit vector, we call such vector as a <code>sketch</code>.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> zeros, random, dot</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sketch</span><span class="params">(M, k)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    M: the matrix of signatures.</span></span><br><span class="line"><span class="string">    k: random vector counts.</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    w,h = M.shape</span><br><span class="line"></span><br><span class="line">    <span class="comment"># generating k random directions. use vectors</span></span><br><span class="line">    <span class="comment"># of normally distributed random numbers.</span></span><br><span class="line">    rd = random.randn(k, h)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># init sketches</span></span><br><span class="line">    sketches = zeros((k, w))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># for each random plane</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(k):</span><br><span class="line">        <span class="comment"># for each signature</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(w):</span><br><span class="line">            <span class="comment"># whether the data point is above the random plane</span></span><br><span class="line">            v = dot(rd[i], M[j])</span><br><span class="line">            <span class="keyword">if</span> v &gt; <span class="number">0</span>:</span><br><span class="line">                sketch = <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> v &lt; <span class="number">0</span>:</span><br><span class="line">                sketch = <span class="number">0</span></span><br><span class="line">            <span class="comment"># v == 0 is of a tiny probability, choose 1 or 0 randomly</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> random.random() &gt;= <span class="number">0.5</span>:</span><br><span class="line">                    sketch = <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    sketch = <span class="number">0</span></span><br><span class="line">            sketches[i][j] = sketch</span><br><span class="line">    <span class="keyword">return</span> sketches</span><br></pre></td></tr></table></figure><p><img src="/images/lsh-matrix-1.png" alt="Figure 1. Matrices of Signatures, LSH, and Skethes."></p><p>Let’s walk through all these steps before moving to the nearest neighbors:</p><ul><li>Signature<ul><li>The image dataset contains $N$ pictures. (e.g, $N = 100,000$)</li><li>Color spaces are cut into $b$ buckets. (e.g, $b = 64$)</li><li>Each signature thus consists of $b$ integers.</li><li><strong>The shape of signature matrix</strong> is <code>N * b</code>. ($N$ rows, $b$ columns)</li></ul></li></ul><ul><li>LSH<ul><li>The LSH family contains $k$ random vectors. (e.g, $k = 256$)</li><li>Each random vector is of $b$ dimension, abd thus has $b$ random floats.  </li><li><strong>The shape of random vector matrix</strong> is <code>k * b</code>.</li></ul></li></ul><ul><li>Sketch  <ul><li>For each random plane, calculate whether the data points are above it.</li><li>Entries of the sketch matrix are binary.</li><li><strong>The shape of sketch matrix</strong> is <code>k * N</code>.</li></ul></li></ul><h2 id="Nearest-Neighbors"><a href="#Nearest-Neighbors" class="headerlink" title="Nearest Neighbors"></a>Nearest Neighbors</h2><p>In order to find the nearest neighbors for a given picture, we can calculate the hamming distance in naive loops.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nested_loop</span><span class="params">(sketches, line)</span>:</span></span><br><span class="line">    <span class="string">'''Naive method to calculate hamming distance'''</span></span><br><span class="line">    h,w = sketches.shape</span><br><span class="line">    r = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, w):</span><br><span class="line">        intersection = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">0</span>, h):</span><br><span class="line">            <span class="keyword">if</span> sketches[k][i] == sketches[k][line]:</span><br><span class="line">                    intersection += <span class="number">1</span></span><br><span class="line">        r.append(round(</span><br><span class="line">            float(intersection) / float(w),</span><br><span class="line">            <span class="number">4</span></span><br><span class="line">        ))</span><br><span class="line">    <span class="keyword">return</span> r</span><br></pre></td></tr></table></figure><p>The naive method uses <code>nested loop</code> to calculate hamming distance, which causes inefficiency for big matrices.</p><p>It’s intuitive to use matrix-friendly method since we could have millions pictures.</p><p><img src="/images/lsh-matrix-2.png" alt="Figure 2. Scores."></p><p>A better method is to select the corresponding row of transposed sketch matrix, which stands for the binary relations between the given picture and $k$ random planes.<br>Then calculate dot product of picture sketch <code>1 * k</code> and matrix <code>k * N</code>, which is a <code>1 * N</code> array of integers.<br>We would like to make this <code>1 * N</code> array, highly correlated to the collection of hamming distances between the given picture and all.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a1 = np.array([ <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b1 = np.array([ <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a1 ^ b1</span><br><span class="line">array([<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line"><span class="comment"># the hamming distance between a1 and b1 is 2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sum(a1 ^ b1)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="comment"># min distance is 0, and max is 4</span></span><br></pre></td></tr></table></figure><p>To speed up the calculation, we replace all $0$ with $-1$.<br>Since,<br>$$ (-1) * (-1) = 1 * 1 = 1 $$<br>And,<br>$$ 1 * (-1) = (-1) * 1 = -1 $$<br>The dot product of new sketch will be an integer between $[-k, k]$.<br>Higher dot product indicates higher similarity, because each similar part contributes $1$ to the result and dissimilar one contributes $-1$.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a2 = np.array([<span class="number">-1</span>, <span class="number">1</span>, <span class="number">1</span>,<span class="number">-1</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b2 = np.array([ <span class="number">1</span>,<span class="number">-1</span>, <span class="number">1</span>,<span class="number">-1</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.dot(a2, b2)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="comment"># (-1)*1 + 1*(-1) + 1*1 + (-1)*(-1) = 0.</span></span><br><span class="line"><span class="comment"># min dot is -4, and max is 4</span></span><br></pre></td></tr></table></figure><p>It’s easy to prove that <code>Dot Product</code>(<code>DP</code>) is directly proportional to the <code>Hamming Distance</code>(<code>HD</code>):</p><p>$$ DP_{A,B} = Sketch_A * Sketch_B’ = N_{same} - N_{diff} $$</p><p>Since, $$ N_{same} + N_{diff} = k $$</p><p>Finally, $$ HD_{A,B} = \frac{N_{same}}{k} = \frac{ DP_{A,B} + k }{2} * \frac {1}{k} = \frac{DP_{A,B}}{2k} + \frac{1}{2} $$</p><p>The function is as follows:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">similar</span><span class="params">(sketches, line)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">transpose_dot</span><span class="params">(sketches, line)</span>:</span></span><br><span class="line">        result = dot(sketches.transpose()[line], sketches)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    scores = transpose_dot(sketches)</span><br><span class="line"></span><br><span class="line">    n = <span class="number">20</span></span><br><span class="line">    top_n = argsort(scores)[-n:][::<span class="number">-1</span>]</span><br><span class="line">    <span class="comment">#       argsort(scores)[-n:]       # last n elements</span></span><br><span class="line">    <span class="comment">#                           [::-1] # reverse to get top N lines</span></span><br><span class="line">    <span class="keyword">return</span> top_n</span><br></pre></td></tr></table></figure><p>By reversing the list of scores, we select best $n$ candidates according to descending scores.</p><h2 id="Tuning-Parameters"><a href="#Tuning-Parameters" class="headerlink" title="Tuning Parameters"></a>Tuning Parameters</h2><p>Tuning parameters to find the optimum balance between accuracy and efficiency is important in the implementation.</p><p>For example, in general, the <code>r-squared</code> of sketch similarity and signature similarity rises with number of vectors. More random vectors can provide better estimation of the similarity, but at the same time cost more time and memory. Thus experiments are carried out as follows:</p><p><img src="https://github.com/kainliu/Prism/raw/master/screenshot/vectors-n.jpg?width=50" alt="Experiments of tuning the number of random vectors. "></p><p>From the above graphs, we can select $k=256$ to get a r-squared greater than $0.9$ while keeping efficiency.</p><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>I made a side project called <a href="https://github.com/kainliu/Prism" target="_blank" rel="noopener">Prism</a>.<br>Prism provides a web-based interface to explain the process from extracting features to searching nearest neighbors.<br>It contains not only the implementation of above algorithms, also uses a dataset with 24,000 pictures as a full-function demo.</p><p>All the source codes, datasets, results and analysis are in the github repository <a href="https://github.com/kainliu/Prism" target="_blank" rel="noopener">github.com/kainliu/Prism</a>.</p><table><thead><tr><th>1</th><th>2</th></tr></thead><tbody><tr><td><img src="https://github.com/kainliu/Prism/raw/master/screenshot/prism-page-001.jpg" alt="Prism provides a web-based interface presenting the process."></td><td><img src="https://github.com/kainliu/Prism/raw/master/screenshot/prism-page-002.jpg" alt="The signature of the chosen picture will be plotted."></td></tr></tbody></table><table><thead><tr><th>3</th><th>4</th></tr></thead><tbody><tr><td><img src="https://github.com/kainliu/Prism/raw/master/screenshot/prism-page-003.jpg" alt="The sketch is plotted in a fan chart. "></td><td><img src="https://raw.githubusercontent.com/kainliu/Prism/master/screenshot/prism-page-004.jpg" alt="The nearest neighbors of chosen picture."></td></tr></tbody></table><h2 id="Experiements"><a href="#Experiements" class="headerlink" title="Experiements"></a>Experiements</h2><table><thead><tr><th>1</th><th>2</th></tr></thead><tbody><tr><td><img src="/images/prism-demo-1.png" alt=""></td><td><img src="/images/prism-demo-2.png" alt=""></td></tr></tbody></table><table><thead><tr><th>3</th><th>4</th></tr></thead><tbody><tr><td><img src="/images/prism-demo-3.png" alt=""></td><td><img src="/images/prism-demo-4.png" alt=""></td></tr></tbody></table><p>As we seen from the above results - nearest neighbors have similar colors - which basically fits our original idea.</p><h2 id="Wrapping-Up"><a href="#Wrapping-Up" class="headerlink" title="Wrapping Up"></a>Wrapping Up</h2><p>It’s a meaningful trial for me, to starting from an idea to presenting a viable tool.</p><p>However, this method is highly influenced by the diversity of colors. For example, the 4th experiment mixed the pictures of white cups with the baseballs, since they share a large percentage of similar white colors.</p><p>To overcome this shortcoming, an option is to take boundaries of the objects into account. There are many popular algorithms in <a href="https://en.wikipedia.org/wiki/Edge_detection" target="_blank" rel="noopener">contour/edge detection</a>.</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/2/20/%C3%84%C3%A4retuvastuse_n%C3%A4ide.png/1000px-%C3%84%C3%A4retuvastuse_n%C3%A4ide.png" width="50%" alt="Edge detection example. From wikipedia."></p>]]></content>
    
    <summary type="html">
    
      A tutorial on hashing-powered searching for nearest neighbors.
    
    </summary>
    
    
      <category term="fingerprint" scheme="http://westworld.name/tags/fingerprint/"/>
    
      <category term="algorithm" scheme="http://westworld.name/tags/algorithm/"/>
    
      <category term="python" scheme="http://westworld.name/tags/python/"/>
    
      <category term="similarity" scheme="http://westworld.name/tags/similarity/"/>
    
  </entry>
  
  <entry>
    <title>Behind A Random String Generator</title>
    <link href="http://westworld.name/posts/behind-a-random-string-generator/"/>
    <id>http://westworld.name/posts/behind-a-random-string-generator/</id>
    <published>2012-05-10T22:00:00.000Z</published>
    <updated>2018-08-11T23:58:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>It starts when I play with the javascript source codes of <code>Google Translate</code>. There is an interesting line:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.floor(<span class="number">2147483648</span> * <span class="built_in">Math</span>.random()).toString(<span class="number">36</span>);</span><br></pre></td></tr></table></figure><p>which generates a random 6-character string, e.g. <code>2qa2xe</code>.</p><ol><li><p><code>Math.toString()</code></p><p> When the string converted from the random number in 36 decimal, the characters are selected from $[0-9] \cup [a-z]$.</p> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">35</span>;</span><br><span class="line">a.toString();   <span class="comment">//"35"</span></span><br><span class="line">a.toString(<span class="number">2</span>);  <span class="comment">//"100011"</span></span><br><span class="line">a.toString(<span class="number">36</span>); <span class="comment">//"z"</span></span><br></pre></td></tr></table></figure></li><li><p><code>2147483648</code></p><p> I found out that this magic number is $2^{31}$.  Since <code>Math.random()</code> returns a float between $[0,1)$,</p> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.floor(<span class="number">2147483648</span> * <span class="built_in">Math</span>.random())</span><br></pre></td></tr></table></figure><p> returns an integer between $[0, 2147483648)$. The ‘largest’ string is <code>zik0zj</code>.</p></li></ol><p>So in my opinion, this line is used as a light-weight random string generator, which could be used to identify the users or sessions.</p><p>For example, we want to generate a 6-character random string.<br>The number corresponding with the max 6 character string <code>zzzzzz</code> is $36^{6} - 1$</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">N = <span class="number">6</span></span><br><span class="line"><span class="comment">// 0 - zzzzzz</span></span><br><span class="line"><span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.pow(<span class="number">36</span>, N) * <span class="built_in">Math</span>.random()).toString(<span class="number">36</span>);</span><br></pre></td></tr></table></figure><p>With little efforts we could extend it to a full generator:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// A random string generator</span></span><br><span class="line"><span class="comment">// @Input: &#123;Integer&#125; string length</span></span><br><span class="line"><span class="comment">// @Output: &#123;String&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomString</span>(<span class="params">N</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// force input to legal integer, otherwise set to default</span></span><br><span class="line">  <span class="keyword">if</span>(!<span class="built_in">parseInt</span>(N,<span class="number">10</span>)) N = <span class="number">6</span></span><br><span class="line">  <span class="comment">// generator string from random number</span></span><br><span class="line">  <span class="keyword">var</span> rs = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.pow(<span class="number">36</span>, N) * <span class="built_in">Math</span>.random()).toString(<span class="number">36</span>);</span><br><span class="line">  <span class="comment">// if the new string is short than N, add 0 on the left</span></span><br><span class="line">  <span class="keyword">return</span> (<span class="built_in">Math</span>.pow(<span class="number">10</span>, N) + rs).substr(-N);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Underneath-the-functions"><a href="#Underneath-the-functions" class="headerlink" title="Underneath the functions"></a>Underneath the functions</h2><p><code>Math.random()</code> may be the most frequently used functions, and almost all mainstream languages have built-in implementations.</p><p>Most Javascript engines use a <a href="https://en.wikipedia.org/wiki/Pseudorandom_number_generator" target="_blank" rel="noopener">pseudo-random number generator(PRNG)</a>, in which the random number is derived from an internal state and calculated by a fixed algorithm. <a href="https://docs.python.org/2/library/random.html" target="_blank" rel="noopener">Python</a> <code>random</code> module also uses pseudo-random number generators with the underlying implementation in C.</p><p>I found an interesting implementation in github repository of <a href="https://github.com/v8/v8/blob/ca6e40d7ba853319c15196fef3f4536c8b3929fe/benchmarks/spinning-balls/v.js" target="_blank" rel="noopener">Chrome v8</a>, in a benchmark implementation.</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// To make the benchmark results predictable, we replace Math.random</span></span><br><span class="line"><span class="comment">// with a 100% deterministic alternative.</span></span><br><span class="line"><span class="built_in">Math</span>.random = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> seed = <span class="number">49734321</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Robert Jenkins' 32 bit integer hash function.</span></span><br><span class="line">    seed = ((seed + <span class="number">0x7ed55d16</span>) + (seed &lt;&lt; <span class="number">12</span>))  &amp; <span class="number">0xffffffff</span>;</span><br><span class="line">    seed = ((seed ^ <span class="number">0xc761c23c</span>) ^ (seed &gt;&gt;&gt; <span class="number">19</span>)) &amp; <span class="number">0xffffffff</span>;</span><br><span class="line">    seed = ((seed + <span class="number">0x165667b1</span>) + (seed &lt;&lt; <span class="number">5</span>))   &amp; <span class="number">0xffffffff</span>;</span><br><span class="line">    seed = ((seed + <span class="number">0xd3a2646c</span>) ^ (seed &lt;&lt; <span class="number">9</span>))   &amp; <span class="number">0xffffffff</span>;</span><br><span class="line">    seed = ((seed + <span class="number">0xfd7046c5</span>) + (seed &lt;&lt; <span class="number">3</span>))   &amp; <span class="number">0xffffffff</span>;</span><br><span class="line">    seed = ((seed ^ <span class="number">0xb55a4f09</span>) ^ (seed &gt;&gt;&gt; <span class="number">16</span>)) &amp; <span class="number">0xffffffff</span>;</span><br><span class="line">    <span class="keyword">return</span> (seed &amp; <span class="number">0xfffffff</span>) / <span class="number">0x10000000</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>It overrides original function and delivers a fixed sequence of “random” number, which is determined by the <code>seed</code>.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># the sequences are deterministic given a particular seed:</span></span><br><span class="line">&gt; Math.random()</span><br><span class="line">  <span class="number">0.9872818551957607</span></span><br><span class="line">&gt; Math.random()</span><br><span class="line">  <span class="number">0.34880331158638</span></span><br><span class="line">&gt; Math.random()</span><br><span class="line">  <span class="number">0.5631933622062206</span></span><br><span class="line">&gt; Math.random()</span><br><span class="line">  <span class="number">0.9990169629454613</span></span><br><span class="line">&gt; Math.random()</span><br><span class="line">  <span class="number">0.8291510976850986</span></span><br></pre></td></tr></table></figure><p>Moreover, from the comments, we could have these inferences:</p><ol><li>this alternative <code>Math.random</code> is deterministic by the seed, to make sure benchmarks are measured in the same way.</li><li>the original <code>Math.random</code> should not be 100% deterministic, at least on time-consuming performance.</li><li>this alternative should not be computationally expensive with a 32-bit internal state.</li></ol><p><em>Yang Guo</em> from V8 project <a href="https://v8project.blogspot.nl/2015/12/theres-mathrandom-and-then-theres.html" target="_blank" rel="noopener">has an introduction</a> about how they upgrade from  the 64-bit internal state algorithm to the new 128-bit one, called <a href="http://vigna.di.unimi.it/ftp/papers/xorshiftplus.pdf" target="_blank" rel="noopener">xorshift128+</a>.</p><p>Of course the solution of adding more bits ($N$) is effective to make random numbers hard to repeat themselves (permutation cycle is $2^{N}$), but, how to get a randomly chosen seed – <strong>a pure spark</strong>?</p><p><img src="/images/dices.jpg" alt="Dices are random number generators when each surface equally shaped."></p><h2 id="Chaos-Uncertainty-Randomness"><a href="#Chaos-Uncertainty-Randomness" class="headerlink" title="Chaos, Uncertainty, Randomness"></a>Chaos, Uncertainty, Randomness</h2><p>Predictable states are unavoidable in computers, while the chaotic universe is full of randomness around us, such as <a href="https://en.wikipedia.org/wiki/Brownian_motion" target="_blank" rel="noopener">Brownian motion</a>, the movement of atoms or molecules.</p><p>The question is how to capture it, and in an efficient way.</p><p>I heard about that in the ancient era of Windows XP, one black magic is to apply an IE plugin to access the current voice input, to get such random variables. The white-noise signals provide very reliable source and thus the JavaScript module could later use it as the unique-id. Though the details are not introduced, I believe it’s feasible.</p><p>At that time I started to think about how to capture such chaotic signals.</p><p>The <a href="http://spectrum.ieee.org/computing/hardware/behind-intels-new-randomnumber-generator" target="_blank" rel="noopener">article</a> by <em>Greg Taylor</em> and <em>George Cox</em> introduces their efforts on Intel’s new random number generator. From this we learned that there have been successful trials to generate random numbers with circuits, however, the cost of energy was one of the biggest shortcomings. Their new solution was fabulous:</p><p><img src="/images/random-number-transistor2.jpg" alt="Uncertain Circuits"></p><blockquote><p>Uncertain Circuits : When transistor 1 and transistor 2 are switched on, a coupled pair of inverters force Node A and Node B into the same state [left]. When the clock pulse rises [yellow, right], these transistors are turned off. Initially the output of both inverters falls into an indeterminate state, but random thermal noise within the inverters soon jostles one node into the logical 1 state and the other goes to logical 0.</p></blockquote><p>The circuits take advantage of the physically random properties of the thermal noise to generate a random binary outcome – a pure spark.</p><p><img src="/images/intel-random-number-generator.jpg" alt="Intel random number generator"></p><p>In practice, the electric features of transistors are never exactly the same, so there will be more one state than another statistically. However we require them to be almost equally distributed with 0s/1s. Given a long stream of raw bits from the <code>circuit</code>, a <code>conditioner</code> is set to monitor the frequency of 0s/1s, to fix the bias and correlation in the long term. Next, the stream from conditioner is sent to <code>PRNG</code>, then we will have the random number.</p><p><strong>I feel this should be the first lesson of my bachelor study on Analog/Digital Circuits. It unveils the design of fundamental graceful hardwares for a commonly used function, and vividly points out the importance of understanding fundamental technologies.</strong> For me, it is very exciting to see such a beautiful solution, and to enjoy the progress to think deeper.</p><p>Another question just occurred to me: is such randomness related with <em>Quantum Communication</em>, if yes, is it taking advantage of the uncertainty in atomic level?</p><h3 id="Aside-Random-numbers-in-Crypto-Safety"><a href="#Aside-Random-numbers-in-Crypto-Safety" class="headerlink" title="Aside: Random numbers in Crypto Safety"></a>Aside: Random numbers in Crypto Safety</h3><p>As <em>Yang Guo</em> points out <a href="https://v8project.blogspot.nl/2015/12/theres-mathrandom-and-then-theres.html" target="_blank" rel="noopener">in the blog</a> that:</p><blockquote><p>Even though <em>xorshift128+</em> is a huge improvement.., it still is not cryptographically secure. For use cases such as hashing, signature generation, and encryption/decryption, ordinary PRNGs are unsuitable. The Web Cryptography API introduces <em>window.crypto.getRandomValues</em>, a method that returns cryptographically secure random values, at a performance cost.</p></blockquote><p>Python docs also give a <a href="https://docs.python.org/2/library/random.html#random.jumpahead" target="_blank" rel="noopener">warning</a>:</p><blockquote><p>Warning: The pseudo-random generators of this module should not be used for security purposes. Use <em>os.urandom()</em> or <em>SystemRandom</em> if you require a cryptographically secure pseudo-random number generator.</p></blockquote><p>Generally, <em>cryptographically secure</em> means <strong>even if the attackers know the current state of this generator (or guess correctly), it’s still infeasible to get the next state with reasonable computational power</strong>.</p><p>It is very clear that they suggested using cryptographically secure pseudo-random number generator <a href="https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator" target="_blank" rel="noopener">CSPRNG</a> instead of PRNG in safety-sensitive scenes.</p>]]></content>
    
    <summary type="html">
    
      Randomness origins from an elegant design of hardware.
    
    </summary>
    
    
      <category term="javascript" scheme="http://westworld.name/tags/javascript/"/>
    
      <category term="hardware" scheme="http://westworld.name/tags/hardware/"/>
    
      <category term="circuits" scheme="http://westworld.name/tags/circuits/"/>
    
  </entry>
  
  <entry>
    <title>Arguments and Interface in Javascript</title>
    <link href="http://westworld.name/posts/arguments-and-interface-in-javascript/"/>
    <id>http://westworld.name/posts/arguments-and-interface-in-javascript/</id>
    <published>2012-03-21T23:00:00.000Z</published>
    <updated>2018-08-11T23:58:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>Let’s start with a simple function <code>person</code>:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">name, sex, age</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// use the variables</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line">person(<span class="string">"Lucy"</span>, <span class="string">"female"</span>, <span class="number">24</span>);</span><br></pre></td></tr></table></figure><p>If we want to add new parameters <code>height</code> and <code>weight</code>, we need to declare them one by one first:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// declare "height" and "weight"</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">name, sex, age, height, weight</span>)</span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// add "height" and "weight" at the tailer</span></span><br><span class="line">person(<span class="string">"Lucy"</span>, <span class="string">"female"</span>, <span class="number">24</span>, <span class="number">160</span>, <span class="number">50</span>);</span><br></pre></td></tr></table></figure><p>Adding more parameters leads to less comprehensibility. To make things worse, when working on fundamental toolkits, it’s possible that the sequential order of parameters can not be guaranteed.</p><p>Then, how to create a function with uncertain amount/order of parameters?</p><h3 id="Arguments"><a href="#Arguments" class="headerlink" title="Arguments"></a>Arguments</h3><p>Some say that JavaScript is a tricky language, and <code>arguments</code> is a tricky part of it.</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">student</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"arguments : "</span> + <span class="built_in">arguments</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"first     : "</span> + <span class="built_in">arguments</span>[<span class="number">0</span>]);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"last      : "</span> + <span class="built_in">arguments</span>[<span class="built_in">arguments</span>.length - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">student(<span class="string">"kevin"</span>, <span class="string">"john"</span>, <span class="string">"lucy"</span>);</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arguments : [<span class="string">"kevin"</span>, <span class="string">"john"</span>, <span class="string">"lucy"</span>]</span><br><span class="line">first     : <span class="string">"kevin"</span></span><br><span class="line">last      : <span class="string">"lucy"</span></span><br></pre></td></tr></table></figure><p>It seems that <code>arguments</code> is an array(but actually it is not, explains afterwards), containing all parameters imported. With <code>arguments</code> introduced, we could make functions with uncertain parameters as following example.</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">student</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> l = <span class="built_in">arguments</span>.length - <span class="number">1</span>; l &gt;= <span class="number">0</span> ; l--)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(l + <span class="string">" : "</span>+ <span class="built_in">arguments</span>[l]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">student(<span class="string">"kevin"</span>, <span class="string">"john"</span>, <span class="string">"lucy"</span>, <span class="string">"mike"</span>, <span class="string">"david"</span>);</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">4</span> : david</span><br><span class="line"><span class="number">3</span> : mike</span><br><span class="line"><span class="number">2</span> : lucy</span><br><span class="line"><span class="number">1</span> : john</span><br><span class="line"><span class="number">0</span> : kevin</span><br></pre></td></tr></table></figure><p>But when we use <code>pop</code> or <code>push</code> method to <code>arguments</code>:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">student</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">  <span class="comment">// try push</span></span><br><span class="line">  args.push(<span class="string">"lili"</span>);</span><br><span class="line">&#125;</span><br><span class="line">student(<span class="string">"kevin"</span>, <span class="string">"john"</span>, <span class="string">"lucy"</span>, <span class="string">"mike"</span>, <span class="string">"david"</span>);</span><br></pre></td></tr></table></figure><p>Output:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">TypeError: Object <span class="comment">#&lt;Object&gt; has no method 'push'</span></span><br></pre></td></tr></table></figure></p><p>It will throw an error – that means <code>arguments</code> is not an array but an Object quite similar. We should use a little trick here, to get a native array:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">student</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// use the natiave Array slice method. Now we get args as a standard array.</span></span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="comment">// try push again</span></span><br><span class="line">    args.push(<span class="string">"lili"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(args);</span><br><span class="line">&#125;</span><br><span class="line">student(<span class="string">"kevin"</span>, <span class="string">"john"</span>, <span class="string">"lucy"</span>, <span class="string">"mike"</span>, <span class="string">"david"</span>);</span><br></pre></td></tr></table></figure><p>Output:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="string">"kevin"</span>, <span class="string">"john"</span>, <span class="string">"lucy"</span>, <span class="string">"mike"</span>, <span class="string">"david"</span>, <span class="string">"lili"</span>]</span><br></pre></td></tr></table></figure></p><p>A more complicated version is a template <code>format</code> function:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">format</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">    <span class="comment">// first item is template</span></span><br><span class="line">    <span class="keyword">var</span> template = args[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// create regular expression, since we don't know how many parameters</span></span><br><span class="line">    <span class="comment">// are imported, use arguments.length as adaptive measurement.</span></span><br><span class="line">    <span class="keyword">var</span> pattern = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"%([1-"</span> + <span class="built_in">arguments</span>.length + <span class="string">"])"</span>, <span class="string">"g"</span>);   </span><br><span class="line"></span><br><span class="line">    <span class="comment">// replace %N with the parameter sorted in the N</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">String</span>(template).replace(pattern, <span class="function"><span class="keyword">function</span>(<span class="params">match, index</span>) </span>&#123;   </span><br><span class="line">        <span class="keyword">return</span> args[index];</span><br><span class="line">    &#125;);   </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">format(<span class="string">"%1 loves %3, %2 loves %3 too."</span>, <span class="string">"daddy"</span>, <span class="string">"mummy"</span>, <span class="string">"katty"</span>);</span><br></pre></td></tr></table></figure><p>Output:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"daddy loves katty, mummy loves katty too."</span></span><br></pre></td></tr></table></figure></p><p>The previous mode which puts every parameters in an array, we could call it <code>SEQUENCE</code>. Is it good enough?</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2006-03-01: "name", "gender", "age"</span></span><br><span class="line">person(<span class="string">"Lucy"</span>, <span class="string">"female"</span>, <span class="number">24</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2006-05-01: Add "height", "weight", "languages"</span></span><br><span class="line">person(<span class="string">"Lucy"</span>, <span class="string">"female"</span>, <span class="number">24</span>, <span class="number">160</span>, <span class="number">50</span>, <span class="string">"cantonese, mandarin"</span>);</span><br></pre></td></tr></table></figure><p>It really happens: with the booming of project, length of arguments increasing, the engineers are hard to distinguish parameters from each other. We could not know what they stand for unless referring to comments or looking into <code>person</code> function. Less self-explainable parameters make it hard to maintain.</p><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><p>A better solution <code>JSON</code>:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Migrate to JSON</span></span><br><span class="line">person(&#123;</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"Lucy"</span>,</span><br><span class="line">  <span class="string">"sex"</span> : <span class="string">"female"</span>,</span><br><span class="line">  <span class="string">"age"</span> : <span class="number">24</span>,</span><br><span class="line">  <span class="string">"height"</span> : &#123;</span><br><span class="line">    <span class="string">"value"</span> : <span class="string">"160"</span>,</span><br><span class="line">    <span class="string">"unit"</span> : <span class="string">"cm"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"weight"</span> : &#123;</span><br><span class="line">    <span class="string">"value"</span> : <span class="string">"50"</span>,</span><br><span class="line">    <span class="string">"unit"</span> : <span class="string">"kg"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"languages"</span>: [<span class="string">"cantonese"</span>, <span class="string">"mandarin"</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>First benefit is that parameters become much more self-explainable, therefore developers do not need to dig into the function or even set breakpoints to find out their meanings then back to work.</p><p>What’s more, when adding a new parameter, there is no need to worry about the order.</p><h3 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h3><p>Unlike other OO program languages like <code>Java</code>, javascript does not have any built-in <code>interface</code>. Although the implementation of interface in javascript is still an arguable point, it is a very flexible language and could be applied with interface without much efforts.</p><p>Like <code>Interface</code> ensures the function has all required <code>methods</code>, the following class is used to ensure the called function contain all the necessary parameters, if not then throw an error.</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Add 'validate' method to an object to be checked</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Store object</span></span><br><span class="line">  <span class="keyword">var</span> _$ = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.obj = obj</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Bind method to prototype</span></span><br><span class="line">  _$.prototype.validate = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> obj = <span class="keyword">this</span>.obj</span><br><span class="line">    <span class="comment">// loop default item</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> options)&#123;</span><br><span class="line">      <span class="comment">// the option is compulsive and when it's undefined</span></span><br><span class="line">      <span class="keyword">if</span>(options[i] === <span class="literal">true</span> &amp;&amp; obj[i] === <span class="literal">undefined</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"item: "</span> + i + <span class="string">" is UNDEFINED! Please check it."</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// return result</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.obj</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> _$(<span class="built_in">arguments</span>[<span class="number">0</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>For example, we use <code>validate</code> method to check <code>person</code>:    </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">jay = &#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"jay"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$(jay).validate(&#123;</span><br><span class="line">  <span class="string">'name'</span>: <span class="literal">true</span></span><br><span class="line">  <span class="string">'sex'</span> : <span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>It is definitely possible to enrich the validation functions:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// New a person object and apply validate method</span></span><br><span class="line">$(jay).validate(&#123;</span><br><span class="line">  <span class="comment">// Required + string</span></span><br><span class="line">  <span class="string">"name"</span> : [<span class="string">"required"</span>, <span class="string">"string"</span>],  </span><br><span class="line">  <span class="comment">// Required + only chosen from the options</span></span><br><span class="line">  <span class="string">"sex"</span>  : [<span class="string">"required"</span>, [<span class="string">"male"</span>,<span class="string">"female"</span>]],</span><br><span class="line">  <span class="comment">// Optional + integer</span></span><br><span class="line">  <span class="string">"age"</span>  : [<span class="string">"optional"</span>, <span class="string">"integer"</span>]  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Moreover, if we change the <code>return this.obj</code> with <code>return this</code> and add a new getter function, the methods could be applied in a chain style:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> candidate = $(jay).validate(&#123;...&#125;)</span><br><span class="line"><span class="keyword">var</span> age = candidate.get(<span class="string">'age'</span>)</span><br></pre></td></tr></table></figure><p>I will recommend <a href="http://www.google.com/#&amp;q=Pro+JavaScript+Design+Patterns" target="_blank" rel="noopener">Pro JavaScript Design Patterns</a> for its chapter on <code>interface</code> concept and comparison of design patterns, between other languages and javascript.</p>]]></content>
    
    <summary type="html">
    
      Some thoughts on designing Javascript function interface.
    
    </summary>
    
    
      <category term="javascript" scheme="http://westworld.name/tags/javascript/"/>
    
  </entry>
  
</feed>
